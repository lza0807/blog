2020-04-08 00:04:11.788 DEBUG [main]com.lza.blog.BlogApplication.logStarting:53 -Running with Spring Boot v2.1.13.RELEASE, Spring v5.1.14.RELEASE
2020-04-08 00:04:24.980 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.AdminMapper.getUserByName.debug:159 -==>  Preparing: select name,header,signature,comment,username,password from bl_admin where username = ? 
2020-04-08 00:04:24.998 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.AdminMapper.getUserByName.debug:159 -==> Parameters: admin(String)
2020-04-08 00:04:25.090 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.AdminMapper.getUserByName.debug:159 -<==      Total: 1
2020-04-08 00:04:25.245 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:04:25.248 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /admin/login(String), [Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=21232f297a57a5a743894a0e4a801fc3)](String), 1(Integer), null, POST(String), 240(Long), {"code":20000,"data":{"token":"6B46840D750350D257ED8D9F7691BA60"},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:04:25.355 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:04:25.452 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:04:25.453 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 1(Long), {"code":20000,"data":{"header":"test","name":"刘子安","password":"21232f297a57a5a743894a0e4a801fc3","signature":"加分","username":"admin"},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:04:25.550 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:04:26.010 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.TypeMapper.getList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-04-08 00:04:26.010 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.TypeMapper.getList.debug:159 -==> Parameters: 
2020-04-08 00:04:26.019 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count,enable from bl_type where deleted = 0 
2020-04-08 00:04:26.019 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-04-08 00:04:26.061 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.TypeMapper.getList.debug:159 -<==      Total: 7
2020-04-08 00:04:26.064 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 7
2020-04-08 00:04:26.110 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:04:26.111 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 95(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":2,"typeId":6,"typeName":"java"},{"enable":1,"typeBlogCount":6,"typeId":7,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"springcloud"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"spring"},{"enable":1,"typeBlogCount":0,"typeId":12,"typeName":"mysql"},{"enable":1,"typeBlogCount":1,"typeId":14,"typeName":"dubbo"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:04:26.112 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:04:26.113 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 104(Long), {"code":20000,"data":[{"typeBlogCount":2,"typeId":6,"typeName":"java"},{"typeBlogCount":6,"typeId":7,"typeName":"springboot"},{"typeBlogCount":0,"typeId":8,"typeName":"springcloud"},{"typeBlogCount":0,"typeId":9,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"spring"},{"typeBlogCount":0,"typeId":12,"typeName":"mysql"},{"typeBlogCount":1,"typeId":14,"typeName":"dubbo"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:04:26.207 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:04:26.213 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:04:31.587 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 limit ?,? 
2020-04-08 00:04:31.588 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-08 00:04:31.709 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-08 00:04:31.758 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-08 00:04:31.758 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-08 00:04:31.806 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-08 00:04:32.283 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:04:32.283 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 320(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":0,"blogTitle":"java下载字符串","createdTime":"2020-04-07 03:27:38","typeName":"java","updateTime":"2020-04-07 12:57:23"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366697506082816","blogRead":0,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2020-04-07 03:32:49","typeName":"springboot","updateTime":"2020-04-07 03:41:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":0,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-04-07 07:11:31","typeName":"springboot","updateTime":"2020-04-07 07:11:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247423253719310336","blogRead":0,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-07 07:18:07"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247423893702991872","blogRead":0,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-07 07:20:06"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:04:32.383 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:06:12.266 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count,enable from bl_type where deleted = 0 
2020-04-08 00:06:12.267 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-04-08 00:06:12.318 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 7
2020-04-08 00:06:12.368 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:06:12.368 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 105(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":2,"typeId":6,"typeName":"java"},{"enable":1,"typeBlogCount":2,"typeId":7,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"springcloud"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"spring"},{"enable":1,"typeBlogCount":0,"typeId":12,"typeName":"mysql"},{"enable":1,"typeBlogCount":1,"typeId":14,"typeName":"dubbo"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:06:12.465 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:06:16.315 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 limit ?,? 
2020-04-08 00:06:16.316 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-08 00:06:16.366 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 4
2020-04-08 00:06:16.417 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-08 00:06:16.418 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-08 00:06:16.463 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-08 00:06:16.512 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:06:16.513 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 198(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":0,"blogTitle":"java下载字符串","createdTime":"2020-04-07 03:27:38","typeName":"java","updateTime":"2020-04-07 12:57:23"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":0,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-04-07 07:11:31","typeName":"springboot","updateTime":"2020-04-07 07:11:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247423253719310336","blogRead":0,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-07 07:18:07"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247423893702991872","blogRead":0,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-07 07:20:06"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":4,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:06:16.611 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:07:21.674 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:07:21.675 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 1(Long), {"code":20000,"data":{"header":"test","name":"刘子安","password":"21232f297a57a5a743894a0e4a801fc3","signature":"加分","username":"admin"},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:07:21.776 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:07:21.980 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 limit ?,? 
2020-04-08 00:07:21.981 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-08 00:07:21.986 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.getList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-04-08 00:07:21.987 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.getList.debug:159 -==> Parameters: 
2020-04-08 00:07:22.029 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-08 00:07:22.034 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.getList.debug:159 -<==      Total: 7
2020-04-08 00:07:22.093 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-08 00:07:22.093 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-08 00:07:22.094 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:07:22.095 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 107(Long), {"code":20000,"data":[{"typeBlogCount":2,"typeId":6,"typeName":"java"},{"typeBlogCount":2,"typeId":7,"typeName":"springboot"},{"typeBlogCount":0,"typeId":8,"typeName":"springcloud"},{"typeBlogCount":0,"typeId":9,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"spring"},{"typeBlogCount":0,"typeId":12,"typeName":"mysql"},{"typeBlogCount":1,"typeId":14,"typeName":"dubbo"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:07:22.138 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-08 00:07:22.206 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:07:22.208 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:07:22.210 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 209(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":0,"blogTitle":"java下载字符串","createdTime":"2020-04-07 03:27:38","typeName":"java","updateTime":"2020-04-07 12:57:23"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366723137474560","blogRead":0,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2020-04-07 03:32:55","typeName":"springboot","updateTime":"2020-04-07 16:06:42"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":0,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-04-07 07:11:31","typeName":"springboot","updateTime":"2020-04-07 07:11:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247423253719310336","blogRead":0,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-07 07:18:07"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247423893702991872","blogRead":0,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-07 07:20:06"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:07:22.307 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:07:24.944 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count,enable from bl_type where deleted = 0 
2020-04-08 00:07:24.945 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-04-08 00:07:25.247 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 7
2020-04-08 00:07:25.294 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:07:25.294 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 348(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":2,"typeId":6,"typeName":"java"},{"enable":1,"typeBlogCount":2,"typeId":7,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"springcloud"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"spring"},{"enable":1,"typeBlogCount":0,"typeId":12,"typeName":"mysql"},{"enable":1,"typeBlogCount":1,"typeId":14,"typeName":"dubbo"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:07:25.393 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:07:27.881 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 limit ?,? 
2020-04-08 00:07:27.882 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-08 00:07:27.929 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-08 00:07:27.980 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-08 00:07:27.980 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-08 00:07:28.027 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-08 00:07:28.074 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:07:28.074 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 194(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":0,"blogTitle":"java下载字符串","createdTime":"2020-04-07 03:27:38","typeName":"java","updateTime":"2020-04-07 12:57:23"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366723137474560","blogRead":0,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2020-04-07 03:32:55","typeName":"springboot","updateTime":"2020-04-07 16:06:42"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":0,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-04-07 07:11:31","typeName":"springboot","updateTime":"2020-04-07 07:11:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247423253719310336","blogRead":0,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-07 07:18:07"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247423893702991872","blogRead":0,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-07 07:20:06"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:07:28.172 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:07:31.020 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-08 00:07:31.020 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247365394201612288(String)
2020-04-08 00:07:31.066 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-08 00:07:31.115 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:07:31.116 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/get/1247365394201612288(String), [1247365394201612288](String), 1(Integer), null, GET(String), 98(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<pre class=\"language-java\"><code> \nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.*;\nimport java.net.URLEncoder;\n \n/**\n * 下载工具类\n * @author czs\n * @date 2020-2-22 11:02:54\n */\npublic class DownloadUtils {\n \n    /**\n     * 根据字符串下载内容\n     *\n     * @param request  request\n     * @param response response\n     * @param fileName 下载的文件名\n     * @param content  字符串内容\n     * @throws IOException\n     */\n    public static void downloadByStringContent(HttpServletRequest request,\n                                               HttpServletResponse response,\n                                               String fileName, String content)\n            throws IOException {\n        //设置向浏览器端传送的文件格式\n        response.setContentType(\"application/octet-stream;charset=utf-8\");\n        response.setCharacterEncoding(\"utf-8\");\n        if (request.getHeader(\"User-Agent\").toLowerCase().indexOf(\"firefox\") &gt; 0) {\n            // firefox浏览器\n            fileName = new String(fileName.getBytes(\"UTF-8\"), \"ISO8859-1\");\n        } else if (request.getHeader(\"User-Agent\").toUpperCase().indexOf(\"MSIE\") &gt; 0) {\n\t\t\t// IE浏览器\n            fileName = URLEncoder.encode(fileName, \"UTF-8\");\n        } else if (request.getHeader(\"User-Agent\").toUpperCase().indexOf(\"CHROME\") &gt; 0) {\n            // 谷歌\n            fileName = new String(fileName.getBytes(\"UTF-8\"), \"ISO8859-1\");\n        }\n        response.setHeader(\"Content-disposition\", \"attachment; filename=\" + fileName);\n        BufferedInputStream inp = null;\n        OutputStream out = response.getOutputStream();\n        try {\n            inp = new BufferedInputStream(new ByteArrayInputStream(content.getBytes(\"utf-8\")));\n            int len = 0;\n            byte[] buf = new byte[1024];\n            while ((len = inp.read(buf)) &gt; 0) {\n                out.write(buf, 0, len);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (inp != null) {\n                inp.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        }\n    }\n \n}</code></pre>\n<pre class=\"language-java\"><code>@ResponseBody\n@RequestMapping(method = RequestMethod.GET, value = \"/exportKtrAndKjb\")\npublic void exportKtrAndKjb(@RequestParam String path, @RequestParam String type, HttpServletRequest request, HttpServletResponse response) throws Exception {\n    String xml = xxxService.getXmlByXXX(path);\n    String fileName = xxxService.getFileNameByXml(xml);\n    DownloadUtils.downloadByStringContent(request, response, fileName, xml);\n}</code></pre>","blogGoods":0,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":0,"blogTitle":"java下载字符串","blogType":6,"createdTime":"2020-04-07 03:27:38","version":4},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:07:31.215 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:07:35.685 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-08 00:07:35.685 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247365394201612288(String)
2020-04-08 00:07:35.734 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-08 00:07:35.736 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-04-08 00:07:35.737 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==> Parameters: java下载字符串(String), http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg(String), <pre class="language-java"><code> 
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.net.URLEncoder;
 
/**
 * 下载工具类
 * @author czs
 * @date 2020-2-22 11:02:54
 */
public class DownloadUtils {
 
    /**
     * 根据字符串下载内容
     *
     * @param request  request
     * @param response response
     * @param fileName 下载的文件名
     * @param content  字符串内容
     * @throws IOException
     */
    public static void downloadByStringContent(HttpServletRequest request,
                                               HttpServletResponse response,
                                               String fileName, String content)
            throws IOException {
        //设置向浏览器端传送的文件格式
        response.setContentType("application/octet-stream;charset=utf-8");
        response.setCharacterEncoding("utf-8");
        if (request.getHeader("User-Agent").toLowerCase().indexOf("firefox") &gt; 0) {
            // firefox浏览器
            fileName = new String(fileName.getBytes("UTF-8"), "ISO8859-1");
        } else if (request.getHeader("User-Agent").toUpperCase().indexOf("MSIE") &gt; 0) {
			// IE浏览器
            fileName = URLEncoder.encode(fileName, "UTF-8");
        } else if (request.getHeader("User-Agent").toUpperCase().indexOf("CHROME") &gt; 0) {
            // 谷歌
            fileName = new String(fileName.getBytes("UTF-8"), "ISO8859-1");
        }
        response.setHeader("Content-disposition", "attachment; filename=" + fileName);
        BufferedInputStream inp = null;
        OutputStream out = response.getOutputStream();
        try {
            inp = new BufferedInputStream(new ByteArrayInputStream(content.getBytes("utf-8")));
            int len = 0;
            byte[] buf = new byte[1024];
            while ((len = inp.read(buf)) &gt; 0) {
                out.write(buf, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (inp != null) {
                inp.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
 
}</code></pre>
<pre class="language-java"><code>@ResponseBody
@RequestMapping(method = RequestMethod.GET, value = "/exportKtrAndKjb")
public void exportKtrAndKjb(@RequestParam String path, @RequestParam String type, HttpServletRequest request, HttpServletResponse response) throws Exception {
    String xml = xxxService.getXmlByXXX(path);
    String fileName = xxxService.getFileNameByXml(xml);
    DownloadUtils.downloadByStringContent(request, response, fileName, xml);
}</code></pre>(String), 0(Integer), 0(Integer), 7(Integer), 0(Integer), 1247365394201612288(String), 4(Integer)
2020-04-08 00:07:35.828 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -<==    Updates: 1
2020-04-08 00:07:35.828 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==>  Preparing: select * from bl_type where type_id = ? and deleted = 0 
2020-04-08 00:07:35.829 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==> Parameters: 6(Integer)
2020-04-08 00:07:35.875 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -<==      Total: 1
2020-04-08 00:07:35.876 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.updateTypeById.debug:159 -==>  Preparing: update bl_type set version = version + 1 ,type_name = ? ,type_blog_count = ? ,enable = ? where type_id = ? and deleted = 0 and version = ? 
2020-04-08 00:07:35.877 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.updateTypeById.debug:159 -==> Parameters: java(String), 1(Integer), 1(Integer), 6(Integer), 17(Integer)
2020-04-08 00:07:35.969 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.updateTypeById.debug:159 -<==    Updates: 1
2020-04-08 00:07:35.969 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==>  Preparing: select * from bl_type where type_id = ? and deleted = 0 
2020-04-08 00:07:35.970 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==> Parameters: 7(Integer)
2020-04-08 00:07:36.014 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -<==      Total: 1
2020-04-08 00:07:36.014 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.updateTypeById.debug:159 -==>  Preparing: update bl_type set version = version + 1 ,type_name = ? ,type_blog_count = ? ,enable = ? where type_id = ? and deleted = 0 and version = ? 
2020-04-08 00:07:36.015 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.updateTypeById.debug:159 -==> Parameters: springboot(String), 3(Integer), 1(Integer), 7(Integer), 3(Integer)
2020-04-08 00:07:36.112 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.updateTypeById.debug:159 -<==    Updates: 1
2020-04-08 00:07:36.294 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:07:36.295 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/update(String), [Blog(blogId=1247365394201612288, blogTitle=java下载字符串, blogImage=http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg, blogContent=<pre class="language-java"><code> 
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.net.URLEncoder;
 
/**
 * 下载工具类
 * @author czs
 * @date 2020-2-22 11:02:54
 */
public class DownloadUtils {
 
    /**
     * 根据字符串下载内容
     *
     * @param request  request
     * @param response response
     * @param fileName 下载的文件名
     * @param content  字符串内容
     * @throws IOException
     */
    public static void downloadByStringContent(HttpServletRequest request,
                                               HttpServletResponse response,
                                               String fileName, String content)
            throws IOException {
        //设置向浏览器端传送的文件格式
        response.setContentType("application/octet-stream;charset=utf-8");
        response.setCharacterEncoding("utf-8");
        if (request.getHeader("User-Agent").toLowerCase().indexOf("firefox") &gt; 0) {
            // firefox浏览器
            fileName = new String(fileName.getBytes("UTF-8"), "ISO8859-1");
        } else if (request.getHeader("User-Agent").toUpperCase().indexOf("MSIE") &gt; 0) {
			// IE浏览器
            fileName = URLEncoder.encode(fileName, "UTF-8");
        } else if (request.getHeader("User-Agent").toUpperCase().indexOf("CHROME") &gt; 0) {
            // 谷歌
            fileName = new String(fileName.getBytes("UTF-8"), "ISO8859-1");
        }
        response.setHeader("Content-disposition", "attachment; filename=" + fileName);
        BufferedInputStream inp = null;
        OutputStream out = response.getOutputStream();
        try {
            inp = new BufferedInputStream(new ByteArrayInputStream(content.getBytes("utf-8")));
            int len = 0;
            byte[] buf = new byte[1024];
            while ((len = inp.read(buf)) &gt; 0) {
                out.write(buf, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (inp != null) {
                inp.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
 
}</code></pre>
<pre class="language-java"><code>@ResponseBody
@RequestMapping(method = RequestMethod.GET, value = "/exportKtrAndKjb")
public void exportKtrAndKjb(@RequestParam String path, @RequestParam String type, HttpServletRequest request, HttpServletResponse response) throws Exception {
    String xml = xxxService.getXmlByXXX(path);
    String fileName = xxxService.getFileNameByXml(xml);
    DownloadUtils.downloadByStringContent(request, response, fileName, xml);
}</code></pre>, blogGoods=0, blogRead=0, blogCollection=0, blogType=7, blogRemark=null, blogComment=0, blogSource=null, createdTime=2020-04-07 03:27:38, updateTime=null, version=4, deleted=null)](String), 1(Integer), null, PUT(String), 677(Long), {"code":20000,"msg":"更新成功!"}(String), 127.0.0.1(String)
2020-04-08 00:07:36.387 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:07:36.759 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 limit ?,? 
2020-04-08 00:07:36.759 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-08 00:07:36.809 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-08 00:07:36.858 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-08 00:07:36.859 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-08 00:07:36.909 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-08 00:07:37.209 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:07:37.210 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=5, list=[BlogVo(typeName=java), BlogVo(typeName=springboot), BlogVo(typeName=springboot), BlogVo(typeName=dubbo), BlogVo(typeName=java)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 198(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":0,"blogTitle":"java下载字符串","createdTime":"2020-04-07 03:27:38","typeName":"springboot","updateTime":"2020-04-07 16:07:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366723137474560","blogRead":0,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2020-04-07 03:32:55","typeName":"springboot","updateTime":"2020-04-07 16:06:42"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":0,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-04-07 07:11:31","typeName":"springboot","updateTime":"2020-04-07 07:11:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247423253719310336","blogRead":0,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-07 07:18:07"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247423893702991872","blogRead":0,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-07 07:20:06"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:07:37.302 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:07:38.347 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count,enable from bl_type where deleted = 0 
2020-04-08 00:07:38.348 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-04-08 00:07:38.394 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 7
2020-04-08 00:07:38.442 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:07:38.444 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 96(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":1,"typeId":6,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":7,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"springcloud"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"spring"},{"enable":1,"typeBlogCount":0,"typeId":12,"typeName":"mysql"},{"enable":1,"typeBlogCount":1,"typeId":14,"typeName":"dubbo"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:07:38.540 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:07:41.816 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 limit ?,? 
2020-04-08 00:07:41.816 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-08 00:07:41.862 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-08 00:07:41.910 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-08 00:07:41.911 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-08 00:07:41.957 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-08 00:07:42.003 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:07:42.004 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 192(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":0,"blogTitle":"java下载字符串","createdTime":"2020-04-07 03:27:38","typeName":"springboot","updateTime":"2020-04-07 16:07:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366723137474560","blogRead":0,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2020-04-07 03:32:55","typeName":"springboot","updateTime":"2020-04-07 16:06:42"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":0,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-04-07 07:11:31","typeName":"springboot","updateTime":"2020-04-07 07:11:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247423253719310336","blogRead":0,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-07 07:18:07"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247423893702991872","blogRead":0,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-07 07:20:06"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:07:42.109 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:07:46.560 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-08 00:07:46.560 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247365394201612288(String)
2020-04-08 00:07:46.608 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-08 00:07:46.656 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:07:46.657 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/get/1247365394201612288(String), [1247365394201612288](String), 1(Integer), null, GET(String), 100(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<pre class=\"language-java\"><code> \nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.*;\nimport java.net.URLEncoder;\n \n/**\n * 下载工具类\n * @author czs\n * @date 2020-2-22 11:02:54\n */\npublic class DownloadUtils {\n \n    /**\n     * 根据字符串下载内容\n     *\n     * @param request  request\n     * @param response response\n     * @param fileName 下载的文件名\n     * @param content  字符串内容\n     * @throws IOException\n     */\n    public static void downloadByStringContent(HttpServletRequest request,\n                                               HttpServletResponse response,\n                                               String fileName, String content)\n            throws IOException {\n        //设置向浏览器端传送的文件格式\n        response.setContentType(\"application/octet-stream;charset=utf-8\");\n        response.setCharacterEncoding(\"utf-8\");\n        if (request.getHeader(\"User-Agent\").toLowerCase().indexOf(\"firefox\") &gt; 0) {\n            // firefox浏览器\n            fileName = new String(fileName.getBytes(\"UTF-8\"), \"ISO8859-1\");\n        } else if (request.getHeader(\"User-Agent\").toUpperCase().indexOf(\"MSIE\") &gt; 0) {\n\t\t\t// IE浏览器\n            fileName = URLEncoder.encode(fileName, \"UTF-8\");\n        } else if (request.getHeader(\"User-Agent\").toUpperCase().indexOf(\"CHROME\") &gt; 0) {\n            // 谷歌\n            fileName = new String(fileName.getBytes(\"UTF-8\"), \"ISO8859-1\");\n        }\n        response.setHeader(\"Content-disposition\", \"attachment; filename=\" + fileName);\n        BufferedInputStream inp = null;\n        OutputStream out = response.getOutputStream();\n        try {\n            inp = new BufferedInputStream(new ByteArrayInputStream(content.getBytes(\"utf-8\")));\n            int len = 0;\n            byte[] buf = new byte[1024];\n            while ((len = inp.read(buf)) &gt; 0) {\n                out.write(buf, 0, len);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (inp != null) {\n                inp.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        }\n    }\n \n}</code></pre>\n<pre class=\"language-java\"><code>@ResponseBody\n@RequestMapping(method = RequestMethod.GET, value = \"/exportKtrAndKjb\")\npublic void exportKtrAndKjb(@RequestParam String path, @RequestParam String type, HttpServletRequest request, HttpServletResponse response) throws Exception {\n    String xml = xxxService.getXmlByXXX(path);\n    String fileName = xxxService.getFileNameByXml(xml);\n    DownloadUtils.downloadByStringContent(request, response, fileName, xml);\n}</code></pre>","blogGoods":0,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":0,"blogTitle":"java下载字符串","blogType":7,"createdTime":"2020-04-07 03:27:38","version":5},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:07:46.751 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:07:52.497 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-08 00:07:52.497 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247365394201612288(String)
2020-04-08 00:07:52.544 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-08 00:07:52.545 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-04-08 00:07:52.546 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==> Parameters: java下载字符串(String), http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg(String), <pre class="language-java"><code> 
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.net.URLEncoder;
 
/**
 * 下载工具类
 * @author czs
 * @date 2020-2-22 11:02:54
 */
public class DownloadUtils {
 
    /**
     * 根据字符串下载内容
     *
     * @param request  request
     * @param response response
     * @param fileName 下载的文件名
     * @param content  字符串内容
     * @throws IOException
     */
    public static void downloadByStringContent(HttpServletRequest request,
                                               HttpServletResponse response,
                                               String fileName, String content)
            throws IOException {
        //设置向浏览器端传送的文件格式
        response.setContentType("application/octet-stream;charset=utf-8");
        response.setCharacterEncoding("utf-8");
        if (request.getHeader("User-Agent").toLowerCase().indexOf("firefox") &gt; 0) {
            // firefox浏览器
            fileName = new String(fileName.getBytes("UTF-8"), "ISO8859-1");
        } else if (request.getHeader("User-Agent").toUpperCase().indexOf("MSIE") &gt; 0) {
			// IE浏览器
            fileName = URLEncoder.encode(fileName, "UTF-8");
        } else if (request.getHeader("User-Agent").toUpperCase().indexOf("CHROME") &gt; 0) {
            // 谷歌
            fileName = new String(fileName.getBytes("UTF-8"), "ISO8859-1");
        }
        response.setHeader("Content-disposition", "attachment; filename=" + fileName);
        BufferedInputStream inp = null;
        OutputStream out = response.getOutputStream();
        try {
            inp = new BufferedInputStream(new ByteArrayInputStream(content.getBytes("utf-8")));
            int len = 0;
            byte[] buf = new byte[1024];
            while ((len = inp.read(buf)) &gt; 0) {
                out.write(buf, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (inp != null) {
                inp.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
 
}</code></pre>
<pre class="language-java"><code>@ResponseBody
@RequestMapping(method = RequestMethod.GET, value = "/exportKtrAndKjb")
public void exportKtrAndKjb(@RequestParam String path, @RequestParam String type, HttpServletRequest request, HttpServletResponse response) throws Exception {
    String xml = xxxService.getXmlByXXX(path);
    String fileName = xxxService.getFileNameByXml(xml);
    DownloadUtils.downloadByStringContent(request, response, fileName, xml);
}</code></pre>(String), 0(Integer), 0(Integer), 6(Integer), 0(Integer), 1247365394201612288(String), 5(Integer)
2020-04-08 00:07:52.638 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -<==    Updates: 1
2020-04-08 00:07:52.638 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==>  Preparing: select * from bl_type where type_id = ? and deleted = 0 
2020-04-08 00:07:52.639 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==> Parameters: 7(Integer)
2020-04-08 00:07:52.682 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -<==      Total: 1
2020-04-08 00:07:52.683 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.updateTypeById.debug:159 -==>  Preparing: update bl_type set version = version + 1 ,type_name = ? ,type_blog_count = ? ,enable = ? where type_id = ? and deleted = 0 and version = ? 
2020-04-08 00:07:52.683 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.updateTypeById.debug:159 -==> Parameters: springboot(String), 2(Integer), 1(Integer), 7(Integer), 4(Integer)
2020-04-08 00:07:52.774 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.updateTypeById.debug:159 -<==    Updates: 1
2020-04-08 00:07:52.775 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==>  Preparing: select * from bl_type where type_id = ? and deleted = 0 
2020-04-08 00:07:52.775 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==> Parameters: 6(Integer)
2020-04-08 00:07:53.070 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -<==      Total: 1
2020-04-08 00:07:53.070 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.updateTypeById.debug:159 -==>  Preparing: update bl_type set version = version + 1 ,type_name = ? ,type_blog_count = ? ,enable = ? where type_id = ? and deleted = 0 and version = ? 
2020-04-08 00:07:53.071 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.updateTypeById.debug:159 -==> Parameters: java(String), 2(Integer), 1(Integer), 6(Integer), 18(Integer)
2020-04-08 00:07:53.161 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.TypeMapper.updateTypeById.debug:159 -<==    Updates: 1
2020-04-08 00:07:53.590 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:07:53.591 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/update(String), [Blog(blogId=1247365394201612288, blogTitle=java下载字符串, blogImage=http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg, blogContent=<pre class="language-java"><code> 
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.net.URLEncoder;
 
/**
 * 下载工具类
 * @author czs
 * @date 2020-2-22 11:02:54
 */
public class DownloadUtils {
 
    /**
     * 根据字符串下载内容
     *
     * @param request  request
     * @param response response
     * @param fileName 下载的文件名
     * @param content  字符串内容
     * @throws IOException
     */
    public static void downloadByStringContent(HttpServletRequest request,
                                               HttpServletResponse response,
                                               String fileName, String content)
            throws IOException {
        //设置向浏览器端传送的文件格式
        response.setContentType("application/octet-stream;charset=utf-8");
        response.setCharacterEncoding("utf-8");
        if (request.getHeader("User-Agent").toLowerCase().indexOf("firefox") &gt; 0) {
            // firefox浏览器
            fileName = new String(fileName.getBytes("UTF-8"), "ISO8859-1");
        } else if (request.getHeader("User-Agent").toUpperCase().indexOf("MSIE") &gt; 0) {
			// IE浏览器
            fileName = URLEncoder.encode(fileName, "UTF-8");
        } else if (request.getHeader("User-Agent").toUpperCase().indexOf("CHROME") &gt; 0) {
            // 谷歌
            fileName = new String(fileName.getBytes("UTF-8"), "ISO8859-1");
        }
        response.setHeader("Content-disposition", "attachment; filename=" + fileName);
        BufferedInputStream inp = null;
        OutputStream out = response.getOutputStream();
        try {
            inp = new BufferedInputStream(new ByteArrayInputStream(content.getBytes("utf-8")));
            int len = 0;
            byte[] buf = new byte[1024];
            while ((len = inp.read(buf)) &gt; 0) {
                out.write(buf, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (inp != null) {
                inp.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
 
}</code></pre>
<pre class="language-java"><code>@ResponseBody
@RequestMapping(method = RequestMethod.GET, value = "/exportKtrAndKjb")
public void exportKtrAndKjb(@RequestParam String path, @RequestParam String type, HttpServletRequest request, HttpServletResponse response) throws Exception {
    String xml = xxxService.getXmlByXXX(path);
    String fileName = xxxService.getFileNameByXml(xml);
    DownloadUtils.downloadByStringContent(request, response, fileName, xml);
}</code></pre>, blogGoods=0, blogRead=0, blogCollection=0, blogType=6, blogRemark=null, blogComment=0, blogSource=null, createdTime=2020-04-07 03:27:38, updateTime=null, version=5, deleted=null)](String), 1(Integer), null, PUT(String), 1156(Long), {"code":20000,"msg":"更新成功!"}(String), 127.0.0.1(String)
2020-04-08 00:07:54.204 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:07:54.308 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 limit ?,? 
2020-04-08 00:07:54.308 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-08 00:07:54.355 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-08 00:07:54.404 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-08 00:07:54.405 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-08 00:07:54.453 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-08 00:07:54.501 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:07:54.502 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=5, list=[BlogVo(typeName=springboot), BlogVo(typeName=springboot), BlogVo(typeName=springboot), BlogVo(typeName=dubbo), BlogVo(typeName=java)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 226(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":0,"blogTitle":"java下载字符串","createdTime":"2020-04-07 03:27:38","typeName":"java","updateTime":"2020-04-07 16:07:52"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366723137474560","blogRead":0,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2020-04-07 03:32:55","typeName":"springboot","updateTime":"2020-04-07 16:06:42"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":0,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-04-07 07:11:31","typeName":"springboot","updateTime":"2020-04-07 07:11:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247423253719310336","blogRead":0,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-07 07:18:07"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247423893702991872","blogRead":0,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-07 07:20:06"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:07:54.594 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-08 00:07:56.671 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count,enable from bl_type where deleted = 0 
2020-04-08 00:07:56.671 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-04-08 00:07:56.715 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 7
2020-04-08 00:07:56.762 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-08 00:07:56.763 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 93(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":2,"typeId":6,"typeName":"java"},{"enable":1,"typeBlogCount":2,"typeId":7,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"springcloud"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"spring"},{"enable":1,"typeBlogCount":0,"typeId":12,"typeName":"mysql"},{"enable":1,"typeBlogCount":1,"typeId":14,"typeName":"dubbo"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-08 00:07:56.855 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
