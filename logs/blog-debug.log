2020-04-12 00:06:49.838 DEBUG [main]com.lza.blog.BlogApplication.logStarting:53 -Running with Spring Boot v2.1.13.RELEASE, Spring v5.1.14.RELEASE
2020-04-12 00:08:37.488 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enable = 1 
2020-04-12 00:08:37.493 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-04-12 00:08:37.521 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-04-12 00:08:37.521 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -==> Parameters: 
2020-04-12 00:08:38.446 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -<==      Total: 2
2020-04-12 00:08:38.977 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by (blog_goods+blog_read) desc limit 3 
2020-04-12 00:08:38.978 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-04-12 00:08:38.979 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:08:38.984 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 1948(Long), {"code":20000,"data":[{"createdTime":"2020-03-30 06:40:24","linkId":1,"linkName":"百度","linkUrl":"https://www.baidu.com","updateTime":"2020-04-08 14:20:23"},{"createdTime":"2020-03-30 06:52:22","linkId":2,"linkName":"github","linkUrl":"https://github.com/lza0807/blog","updateTime":"2020-03-30 06:52:22"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:08:39.675 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 3
2020-04-12 00:08:40.089 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:08:40.100 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:08:40.101 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, GET(String), 3369(Long), {"code":20000,"data":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":34,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":13,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:08:40.109 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-04-12 00:08:40.364 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:08:40.428 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:08:40.365 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 3613(Long), {"code":20000,"data":[{"artist":"薛之谦","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6NwLSAXMSaAABUQgn8TDQ402.jpg","id":4,"lrc":"我们都迁就嘴巴\n\n我们都憋着真话\n\n我们都让爱先发芽\n\n我们会接受惩罚\n\n有一个变成哑巴\n\n越退让越不会表达\n\n所有的安静都是人造的冷清\n\n所有的杂音在安慰后平静\n\n我不需要证明\n\n我不需要声音\n\n我就像一个哑巴一样\n\n你翻译不了我的声响\n\n怕腻烦过量\n\n我举止要限量\n\n你可以当我哑巴一样\n\n你不会看见我的抵抗\n\n请别怕我受伤 我自己会圆场\n\n我们会接受惩罚\n\n有一个变成哑巴\n\n越退让越不会表达\n\n所有的安静都是人造的冷清\n\n所有的杂音在安慰后平静\n\n我不需要证明\n\n我不需要声音\n\n我就像一个哑巴一样\n\n你翻译不了我的声响\n\n怕腻烦过量\n\n我举止要限量\n\n你可以当我哑巴一样\n\n你不会看见我的抵抗\n\n请别怕我受伤 我自己会圆场\n\n我就像一个哑巴一样\n\n反正我也不擅长抵抗","name":"哑巴","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6NwL2AQNqoAECd-iFlcLw799.mp3"},{"artist":"毛不易","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2tCAXf86AAEnuTs7KeY474.jpg","id":5,"lrc":"[00:00.02]李晓东 - 消愁(Live)\n[00:01.64]作词：毛不易\n[00:03.05]作曲：毛不易\n[00:04.47]原唱：毛不易\n[00:05.63]编曲：吴牧禅、范郡哲\n[00:07.65]program：吴牧禅\n[00:08.66]制作人：吴牧禅\n[00:06.24]花腔女高音：王莉\n[00:12.10]大提琴：翟慧莉\n[00:52.14]当你走进这欢乐场\n[00:56.69]背上所有的梦与想\n[01:01.19]各色的脸上各色的妆\n[01:06.08]没人记得你的模样\n[01:10.92]三巡酒过你在角落\n[01:15.46]固执地唱着苦涩的歌\n[01:20.51]听他在喧嚣里被淹没\n[01:24.93]你拿起酒杯对自己说\n[01:30.07]一杯敬朝阳\n[01:32.19]一杯敬月光\n[01:35.14]唤醒我的向往\n[01:37.27]温柔了寒窗\n[01:39.24]于是可以不回头地\n[01:41.92]逆风飞翔\n[01:44.34]不怕心头有雨\n[01:46.62]眼底有霜\n[01:49.28]一杯敬故乡\n[01:51.41]一杯敬远方\n[01:53.98]守着我的善良\n[01:56.49]催着我成长\n[01:58.31]所以南北的路\n[02:00.18]从此不再漫长\n[02:03.71]灵魂不再无处安放\n[02:32.70]当你走进这欢乐场\n[02:37.25]背上所有的梦与想\n[02:42.04]各色的脸上各色的妆\n[02:46.79]没人记得你的模样\n[02:51.69]三巡酒过你在角落\n[02:56.44]固执地唱着苦涩的歌\n[03:01.24]听他在喧嚣里被淹没\n[03:05.73]你拿起酒杯对自己说\n[03:15.93]一杯敬朝阳\n[03:17.69]一杯敬月光\n[03:20.75]唤醒我的向往\n[03:22.82]温柔了寒窗\n[03:24.64]于是可以不回头地\n[03:27.42]逆风飞翔\n[03:30.14]不怕心头有雨\n[03:32.21]眼底有霜\n[03:35.19]一杯敬故乡\n[03:36.96]一杯敬远方\n[03:39.63]守着我的善良\n[03:42.00]催着我成长\n[03:43.92]所以南北的路\n[03:45.72]从此不再漫长\n[03:49.26]灵魂不再无处安放\n[03:56.79]一杯敬明天\n[03:58.46]一杯敬过往\n[04:01.23]支撑我的身体\n[04:03.75]厚重了肩膀\n[04:05.52]虽然从不相信\n[04:07.34]所谓山高水长\n[04:10.84]人生苦短\n[04:12.07]何必念念不忘\n[04:15.76]一杯敬自由\n[04:17.79]一杯敬死亡\n[04:20.46]宽恕我的平凡\n[04:22.88]驱散了迷惘\n[04:24.69]好吧天亮之后\n[04:26.51]总是潦草离场\n[04:30.39]清醒的人最荒唐\n[04:34.58]好吧天亮之后\n[04:36.15]总是潦草离场\n[04:39.82]清醒的人最荒唐\n[04:48.92]一杯敬自由\n[04:50.79]一杯敬死亡\n[04:53.62]宽恕我的平凡\n[04:56.00]驱散了迷惘\n[04:57.87]好吧天亮之后\n[04:59.68]总是潦草离场\n[05:03.27]清醒的人最荒唐\n[05:07.45]好吧天亮之后\n[05:09.22]总是潦草离场\n[05:13.07]清醒的人最荒唐","name":"消愁 (Live)","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2tuAIYnhACuroacKT6g509.mp3"},{"artist":"许嵩","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2_OAQrF4AADgUZTFOG8276.jpg","id":6,"lrc":"清明雨上 - 许嵩 (Vae Xu)词：许嵩、安琪曲：许嵩窗透初晓 日照西桥 云自摇想你当年荷风微摆的衣角木雕鎏金 岁月涟漪 七年前封笔因为我今生挥毫只为你雨打湿了眼眶 年年倚井盼归堂最怕不觉泪已拆两行我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱远方有琴 愀然空灵 声声催天雨涓涓心事说给自己听月影憧憧 烟火几重 烛花红红尘旧梦 梦断都成空雨打湿了眼眶 年年倚井盼归堂最怕不觉泪已拆两行我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱","name":"清明雨上","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2_-AdPXAADb-sifc6g4167.mp3"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:08:40.752 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:09:24.872 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:09:24.875 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/getByBlog/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 48499(Long), {"code":20000,"data":[],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:09:24.944 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.UserMapper.isNotExist.debug:159 -==>  Preparing: select user_id, username,password, name, sex, header,deleted, nickname, user_email, created_time, update_time from bl_user where username = ? 
2020-04-12 00:09:24.944 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.UserMapper.isNotExist.debug:159 -==> Parameters: liuzian(String)
2020-04-12 00:09:24.963 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:09:24.989 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.UserMapper.isNotExist.debug:159 -<==      Total: 1
2020-04-12 00:09:25.050 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:09:25.051 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=liuzian, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 98(Long), {"code":20000,"data":{"user":{"createdTime":"2020-04-06 14:11:18","header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqWOAIDsBAAB28yzuliM075.jpg","name":"liuzian1","nickname":"昵称刘子安","password":"","sex":1,"updateTime":"2020-04-11 15:20:14","userEmail":"2282816304@qq.com","userId":3,"username":"liuzian"},"token":"0D4A622423D829CB7321CD78022E8812"},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:09:25.149 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:09:32.119 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.UserMapper.isNotExist.debug:159 -==>  Preparing: select user_id, username,password, name, sex, header,deleted, nickname, user_email, created_time, update_time from bl_user where username = ? 
2020-04-12 00:09:32.120 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.UserMapper.isNotExist.debug:159 -==> Parameters: liuzian(String)
2020-04-12 00:09:32.170 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.UserMapper.isNotExist.debug:159 -<==      Total: 1
2020-04-12 00:09:32.218 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:09:32.219 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=liuzian, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 97(Long), {"code":20000,"data":{"user":{"createdTime":"2020-04-06 14:11:18","header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqWOAIDsBAAB28yzuliM075.jpg","name":"liuzian1","nickname":"昵称刘子安","password":"","sex":1,"updateTime":"2020-04-11 15:20:14","userEmail":"2282816304@qq.com","userId":3,"username":"liuzian"},"token":"0D4A622423D829CB7321CD78022E8812"},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:09:32.309 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:09:33.258 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enable = 1 
2020-04-12 00:09:33.259 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-04-12 00:09:33.261 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by (blog_goods+blog_read) desc limit 3 
2020-04-12 00:09:33.262 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-04-12 00:09:33.263 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-04-12 00:09:33.264 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -==> Parameters: 
2020-04-12 00:09:33.332 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -<==      Total: 2
2020-04-12 00:09:33.332 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 3
2020-04-12 00:09:33.439 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-04-12 00:09:33.442 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin 
2020-04-12 00:09:33.442 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -==> Parameters: 
2020-04-12 00:09:33.443 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:09:33.444 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, GET(String), 195(Long), {"code":20000,"data":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":34,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":13,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:09:33.497 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -<==      Total: 1
2020-04-12 00:09:33.502 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by created_time desc limit ?,? 
2020-04-12 00:09:33.503 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-12 00:09:33.503 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:09:33.504 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 195(Long), {"code":20000,"data":[{"createdTime":"2020-03-30 06:40:24","linkId":1,"linkName":"百度","linkUrl":"https://www.baidu.com","updateTime":"2020-04-08 14:20:23"},{"createdTime":"2020-03-30 06:52:22","linkId":2,"linkName":"github","linkUrl":"https://github.com/lza0807/blog","updateTime":"2020-03-30 06:52:22"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:09:33.595 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:09:33.599 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:09:33.600 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 302(Long), {"code":20000,"data":[{"artist":"薛之谦","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6NwLSAXMSaAABUQgn8TDQ402.jpg","id":4,"lrc":"我们都迁就嘴巴\n\n我们都憋着真话\n\n我们都让爱先发芽\n\n我们会接受惩罚\n\n有一个变成哑巴\n\n越退让越不会表达\n\n所有的安静都是人造的冷清\n\n所有的杂音在安慰后平静\n\n我不需要证明\n\n我不需要声音\n\n我就像一个哑巴一样\n\n你翻译不了我的声响\n\n怕腻烦过量\n\n我举止要限量\n\n你可以当我哑巴一样\n\n你不会看见我的抵抗\n\n请别怕我受伤 我自己会圆场\n\n我们会接受惩罚\n\n有一个变成哑巴\n\n越退让越不会表达\n\n所有的安静都是人造的冷清\n\n所有的杂音在安慰后平静\n\n我不需要证明\n\n我不需要声音\n\n我就像一个哑巴一样\n\n你翻译不了我的声响\n\n怕腻烦过量\n\n我举止要限量\n\n你可以当我哑巴一样\n\n你不会看见我的抵抗\n\n请别怕我受伤 我自己会圆场\n\n我就像一个哑巴一样\n\n反正我也不擅长抵抗","name":"哑巴","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6NwL2AQNqoAECd-iFlcLw799.mp3"},{"artist":"毛不易","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2tCAXf86AAEnuTs7KeY474.jpg","id":5,"lrc":"[00:00.02]李晓东 - 消愁(Live)\n[00:01.64]作词：毛不易\n[00:03.05]作曲：毛不易\n[00:04.47]原唱：毛不易\n[00:05.63]编曲：吴牧禅、范郡哲\n[00:07.65]program：吴牧禅\n[00:08.66]制作人：吴牧禅\n[00:06.24]花腔女高音：王莉\n[00:12.10]大提琴：翟慧莉\n[00:52.14]当你走进这欢乐场\n[00:56.69]背上所有的梦与想\n[01:01.19]各色的脸上各色的妆\n[01:06.08]没人记得你的模样\n[01:10.92]三巡酒过你在角落\n[01:15.46]固执地唱着苦涩的歌\n[01:20.51]听他在喧嚣里被淹没\n[01:24.93]你拿起酒杯对自己说\n[01:30.07]一杯敬朝阳\n[01:32.19]一杯敬月光\n[01:35.14]唤醒我的向往\n[01:37.27]温柔了寒窗\n[01:39.24]于是可以不回头地\n[01:41.92]逆风飞翔\n[01:44.34]不怕心头有雨\n[01:46.62]眼底有霜\n[01:49.28]一杯敬故乡\n[01:51.41]一杯敬远方\n[01:53.98]守着我的善良\n[01:56.49]催着我成长\n[01:58.31]所以南北的路\n[02:00.18]从此不再漫长\n[02:03.71]灵魂不再无处安放\n[02:32.70]当你走进这欢乐场\n[02:37.25]背上所有的梦与想\n[02:42.04]各色的脸上各色的妆\n[02:46.79]没人记得你的模样\n[02:51.69]三巡酒过你在角落\n[02:56.44]固执地唱着苦涩的歌\n[03:01.24]听他在喧嚣里被淹没\n[03:05.73]你拿起酒杯对自己说\n[03:15.93]一杯敬朝阳\n[03:17.69]一杯敬月光\n[03:20.75]唤醒我的向往\n[03:22.82]温柔了寒窗\n[03:24.64]于是可以不回头地\n[03:27.42]逆风飞翔\n[03:30.14]不怕心头有雨\n[03:32.21]眼底有霜\n[03:35.19]一杯敬故乡\n[03:36.96]一杯敬远方\n[03:39.63]守着我的善良\n[03:42.00]催着我成长\n[03:43.92]所以南北的路\n[03:45.72]从此不再漫长\n[03:49.26]灵魂不再无处安放\n[03:56.79]一杯敬明天\n[03:58.46]一杯敬过往\n[04:01.23]支撑我的身体\n[04:03.75]厚重了肩膀\n[04:05.52]虽然从不相信\n[04:07.34]所谓山高水长\n[04:10.84]人生苦短\n[04:12.07]何必念念不忘\n[04:15.76]一杯敬自由\n[04:17.79]一杯敬死亡\n[04:20.46]宽恕我的平凡\n[04:22.88]驱散了迷惘\n[04:24.69]好吧天亮之后\n[04:26.51]总是潦草离场\n[04:30.39]清醒的人最荒唐\n[04:34.58]好吧天亮之后\n[04:36.15]总是潦草离场\n[04:39.82]清醒的人最荒唐\n[04:48.92]一杯敬自由\n[04:50.79]一杯敬死亡\n[04:53.62]宽恕我的平凡\n[04:56.00]驱散了迷惘\n[04:57.87]好吧天亮之后\n[04:59.68]总是潦草离场\n[05:03.27]清醒的人最荒唐\n[05:07.45]好吧天亮之后\n[05:09.22]总是潦草离场\n[05:13.07]清醒的人最荒唐","name":"消愁 (Live)","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2tuAIYnhACuroacKT6g509.mp3"},{"artist":"许嵩","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2_OAQrF4AADgUZTFOG8276.jpg","id":6,"lrc":"清明雨上 - 许嵩 (Vae Xu)词：许嵩、安琪曲：许嵩窗透初晓 日照西桥 云自摇想你当年荷风微摆的衣角木雕鎏金 岁月涟漪 七年前封笔因为我今生挥毫只为你雨打湿了眼眶 年年倚井盼归堂最怕不觉泪已拆两行我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱远方有琴 愀然空灵 声声催天雨涓涓心事说给自己听月影憧憧 烟火几重 烛花红红尘旧梦 梦断都成空雨打湿了眼眶 年年倚井盼归堂最怕不觉泪已拆两行我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱","name":"清明雨上","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2_-AdPXAADb-sifc6g4167.mp3"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:09:33.603 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-12 00:09:33.662 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:09:33.663 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 361(Long), {"code":20000,"data":{"header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqEaAXJe9AAB28yzuliM858.jpg","id":1,"name":"刘子安","signature":"勤能补拙","username":"admin"},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:09:33.665 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-12 00:09:33.666 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-12 00:09:33.714 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:09:33.746 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-12 00:09:33.836 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:09:33.836 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:09:33.840 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:09:33.842 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 880(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":34,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-11 15:20:35"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":13,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-11 15:17:04"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java","updateTime":"2020-04-11 15:19:19"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":2,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-02-17 07:11:31","typeName":"springboot","updateTime":"2020-04-11 13:33:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366723137474560","blogRead":5,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2019-09-09 03:32:55","typeName":"springboot","updateTime":"2020-04-11 14:11:27"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:09:34.183 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:09:44.713 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:09:44.714 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247423893702991872(String)
2020-04-12 00:09:44.757 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:09:44.758 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/getByBlog/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 7434(Long), {"code":20000,"data":[],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:09:44.771 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:09:44.773 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-04-12 00:09:44.774 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==> Parameters: 到底要不要重复造轮子?(String), <p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>
<p>那这句有道理吗？</p>
<p>我个人觉得：</p>
<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>
<p>任何事情都有两面性</p>
<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>
<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>
<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>
<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>
<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>
<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>
<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>
<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>
<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>
<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>(String), 2(Integer), 35(Integer), 2(Integer), 6(Integer), 0(Integer), 1247423893702991872(String), 37(Integer)
2020-04-12 00:09:44.852 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:09:44.862 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -<==    Updates: 1
2020-04-12 00:09:44.868 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==>  Preparing: select * from bl_type where type_id = ? and deleted = 0 
2020-04-12 00:09:44.868 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==> Parameters: 6(Integer)
2020-04-12 00:09:44.915 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -<==      Total: 1
2020-04-12 00:09:44.931 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:09:44.931 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getCollection/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 7605(Long), {"code":20000,"data":2,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:09:45.019 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:09:45.097 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:09:45.098 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/read/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 7772(Long), {"code":20000,"data":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":35,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","typeName":"java","version":37},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:09:45.191 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:09:45.191 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:09:45.192 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getGood/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 7858(Long), {"code":20000,"data":2,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:09:45.296 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:09:48.396 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.UserMapper.getById.debug:159 -==>  Preparing: select user_id, username, name, sex, header, nickname, user_email, created_time, update_time, version from bl_user where user_id = ? and deleted = 0 and version = ? 
2020-04-12 00:09:48.397 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.UserMapper.getById.debug:159 -==> Parameters: 3(Integer), 3(Integer)
2020-04-12 00:09:48.440 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.UserMapper.getById.debug:159 -<==      Total: 0
2020-04-12 00:09:48.487 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:09:48.487 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247423893702991872(String)
2020-04-12 00:09:48.579 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:09:48.730 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:09:48.732 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/save(String), [Comment(id=null, commentContent=ssss, commentUser=null, user=null, commentBlog=1247423893702991872, blog=null, commentGood=null, createdTime=null, commentFlag=false)](String), 1(Integer), null, POST(String), 335(Long), {"code":20000,"msg":"评论成功!"}(String), 127.0.0.1(String)
2020-04-12 00:09:48.821 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:10:12.945 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:10:12.945 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/getByBlog/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 24045(Long), {"code":20000,"data":[{"blog":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":35,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","version":38},"commentBlog":"1247423893702991872","commentContent":"ssss","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:09:48","id":"1249006746098253824"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:10:13.036 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:11:10.429 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.UserMapper.getById.debug:159 -==>  Preparing: select user_id, username, name, sex, header, nickname, user_email, created_time, update_time, version from bl_user where user_id = ? and deleted = 0 and version = ? 
2020-04-12 00:11:10.431 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.UserMapper.getById.debug:159 -==> Parameters: 3(Integer), 3(Integer)
2020-04-12 00:11:10.486 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.UserMapper.getById.debug:159 -<==      Total: 0
2020-04-12 00:12:04.975 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:12:04.975 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247423893702991872(String)
2020-04-12 00:12:05.037 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:12:16.781 DEBUG [main]com.lza.blog.BlogApplication.logStarting:53 -Running with Spring Boot v2.1.13.RELEASE, Spring v5.1.14.RELEASE
2020-04-12 00:12:39.923 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.UserMapper.isNotExist.debug:159 -==>  Preparing: select user_id, username,password, name, sex, header,deleted, nickname, user_email, created_time, update_time from bl_user where username = ? 
2020-04-12 00:12:39.942 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.UserMapper.isNotExist.debug:159 -==> Parameters: liuzian(String)
2020-04-12 00:12:40.297 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.UserMapper.isNotExist.debug:159 -<==      Total: 1
2020-04-12 00:12:40.499 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:12:40.502 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=liuzian, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 567(Long), {"code":20000,"data":{"user":{"createdTime":"2020-04-06 14:11:18","header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqWOAIDsBAAB28yzuliM075.jpg","name":"liuzian1","nickname":"昵称刘子安","password":"","sex":1,"updateTime":"2020-04-11 15:20:14","userEmail":"2282816304@qq.com","userId":3,"username":"liuzian"},"token":"28857A001874405F5208FF8C5F495B05"},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:12:40.904 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:12:41.824 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin 
2020-04-12 00:12:41.825 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -==> Parameters: 
2020-04-12 00:12:41.839 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by (blog_goods+blog_read) desc limit 3 
2020-04-12 00:12:41.840 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-04-12 00:12:41.871 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -<==      Total: 1
2020-04-12 00:12:41.882 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by created_time desc limit ?,? 
2020-04-12 00:12:41.884 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-12 00:12:41.891 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 3
2020-04-12 00:12:41.928 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:12:41.929 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 106(Long), {"code":20000,"data":{"header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqEaAXJe9AAB28yzuliM858.jpg","id":1,"name":"刘子安","signature":"勤能补拙","username":"admin"},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:12:41.931 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-12 00:12:41.958 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:12:41.959 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, GET(String), 125(Long), {"code":20000,"data":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":35,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":13,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:12:41.986 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-12 00:12:41.987 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-12 00:12:42.021 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:12:42.034 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-12 00:12:42.048 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:12:42.272 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:12:42.273 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 264(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":35,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-11 16:09:42"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":13,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-11 15:17:04"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java","updateTime":"2020-04-11 15:19:19"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":2,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-02-17 07:11:31","typeName":"springboot","updateTime":"2020-04-11 13:33:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366723137474560","blogRead":5,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2019-09-09 03:32:55","typeName":"springboot","updateTime":"2020-04-11 14:11:27"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:12:42.330 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enable = 1 
2020-04-12 00:12:42.331 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-04-12 00:12:42.336 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-04-12 00:12:42.337 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -==> Parameters: 
2020-04-12 00:12:42.366 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:12:42.376 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-04-12 00:12:42.380 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -<==      Total: 2
2020-04-12 00:12:42.434 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:12:42.435 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 108(Long), {"code":20000,"data":[{"artist":"薛之谦","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6NwLSAXMSaAABUQgn8TDQ402.jpg","id":4,"lrc":"我们都迁就嘴巴\n\n我们都憋着真话\n\n我们都让爱先发芽\n\n我们会接受惩罚\n\n有一个变成哑巴\n\n越退让越不会表达\n\n所有的安静都是人造的冷清\n\n所有的杂音在安慰后平静\n\n我不需要证明\n\n我不需要声音\n\n我就像一个哑巴一样\n\n你翻译不了我的声响\n\n怕腻烦过量\n\n我举止要限量\n\n你可以当我哑巴一样\n\n你不会看见我的抵抗\n\n请别怕我受伤 我自己会圆场\n\n我们会接受惩罚\n\n有一个变成哑巴\n\n越退让越不会表达\n\n所有的安静都是人造的冷清\n\n所有的杂音在安慰后平静\n\n我不需要证明\n\n我不需要声音\n\n我就像一个哑巴一样\n\n你翻译不了我的声响\n\n怕腻烦过量\n\n我举止要限量\n\n你可以当我哑巴一样\n\n你不会看见我的抵抗\n\n请别怕我受伤 我自己会圆场\n\n我就像一个哑巴一样\n\n反正我也不擅长抵抗","name":"哑巴","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6NwL2AQNqoAECd-iFlcLw799.mp3"},{"artist":"毛不易","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2tCAXf86AAEnuTs7KeY474.jpg","id":5,"lrc":"[00:00.02]李晓东 - 消愁(Live)\n[00:01.64]作词：毛不易\n[00:03.05]作曲：毛不易\n[00:04.47]原唱：毛不易\n[00:05.63]编曲：吴牧禅、范郡哲\n[00:07.65]program：吴牧禅\n[00:08.66]制作人：吴牧禅\n[00:06.24]花腔女高音：王莉\n[00:12.10]大提琴：翟慧莉\n[00:52.14]当你走进这欢乐场\n[00:56.69]背上所有的梦与想\n[01:01.19]各色的脸上各色的妆\n[01:06.08]没人记得你的模样\n[01:10.92]三巡酒过你在角落\n[01:15.46]固执地唱着苦涩的歌\n[01:20.51]听他在喧嚣里被淹没\n[01:24.93]你拿起酒杯对自己说\n[01:30.07]一杯敬朝阳\n[01:32.19]一杯敬月光\n[01:35.14]唤醒我的向往\n[01:37.27]温柔了寒窗\n[01:39.24]于是可以不回头地\n[01:41.92]逆风飞翔\n[01:44.34]不怕心头有雨\n[01:46.62]眼底有霜\n[01:49.28]一杯敬故乡\n[01:51.41]一杯敬远方\n[01:53.98]守着我的善良\n[01:56.49]催着我成长\n[01:58.31]所以南北的路\n[02:00.18]从此不再漫长\n[02:03.71]灵魂不再无处安放\n[02:32.70]当你走进这欢乐场\n[02:37.25]背上所有的梦与想\n[02:42.04]各色的脸上各色的妆\n[02:46.79]没人记得你的模样\n[02:51.69]三巡酒过你在角落\n[02:56.44]固执地唱着苦涩的歌\n[03:01.24]听他在喧嚣里被淹没\n[03:05.73]你拿起酒杯对自己说\n[03:15.93]一杯敬朝阳\n[03:17.69]一杯敬月光\n[03:20.75]唤醒我的向往\n[03:22.82]温柔了寒窗\n[03:24.64]于是可以不回头地\n[03:27.42]逆风飞翔\n[03:30.14]不怕心头有雨\n[03:32.21]眼底有霜\n[03:35.19]一杯敬故乡\n[03:36.96]一杯敬远方\n[03:39.63]守着我的善良\n[03:42.00]催着我成长\n[03:43.92]所以南北的路\n[03:45.72]从此不再漫长\n[03:49.26]灵魂不再无处安放\n[03:56.79]一杯敬明天\n[03:58.46]一杯敬过往\n[04:01.23]支撑我的身体\n[04:03.75]厚重了肩膀\n[04:05.52]虽然从不相信\n[04:07.34]所谓山高水长\n[04:10.84]人生苦短\n[04:12.07]何必念念不忘\n[04:15.76]一杯敬自由\n[04:17.79]一杯敬死亡\n[04:20.46]宽恕我的平凡\n[04:22.88]驱散了迷惘\n[04:24.69]好吧天亮之后\n[04:26.51]总是潦草离场\n[04:30.39]清醒的人最荒唐\n[04:34.58]好吧天亮之后\n[04:36.15]总是潦草离场\n[04:39.82]清醒的人最荒唐\n[04:48.92]一杯敬自由\n[04:50.79]一杯敬死亡\n[04:53.62]宽恕我的平凡\n[04:56.00]驱散了迷惘\n[04:57.87]好吧天亮之后\n[04:59.68]总是潦草离场\n[05:03.27]清醒的人最荒唐\n[05:07.45]好吧天亮之后\n[05:09.22]总是潦草离场\n[05:13.07]清醒的人最荒唐","name":"消愁 (Live)","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2tuAIYnhACuroacKT6g509.mp3"},{"artist":"许嵩","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2_OAQrF4AADgUZTFOG8276.jpg","id":6,"lrc":"清明雨上 - 许嵩 (Vae Xu)词：许嵩、安琪曲：许嵩窗透初晓 日照西桥 云自摇想你当年荷风微摆的衣角木雕鎏金 岁月涟漪 七年前封笔因为我今生挥毫只为你雨打湿了眼眶 年年倚井盼归堂最怕不觉泪已拆两行我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱远方有琴 愀然空灵 声声催天雨涓涓心事说给自己听月影憧憧 烟火几重 烛花红红尘旧梦 梦断都成空雨打湿了眼眶 年年倚井盼归堂最怕不觉泪已拆两行我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱","name":"清明雨上","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2_-AdPXAADb-sifc6g4167.mp3"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:12:42.435 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:12:42.436 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 101(Long), {"code":20000,"data":[{"createdTime":"2020-03-30 06:40:24","linkId":1,"linkName":"百度","linkUrl":"https://www.baidu.com","updateTime":"2020-04-08 14:20:23"},{"createdTime":"2020-03-30 06:52:22","linkId":2,"linkName":"github","linkUrl":"https://github.com/lza0807/blog","updateTime":"2020-03-30 06:52:22"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:12:42.523 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:12:42.526 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:12:45.783 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:12:45.786 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getCollection/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 320(Long), {"code":20000,"data":2,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:12:45.821 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:12:45.821 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247423893702991872(String)
2020-04-12 00:12:45.897 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:12:45.901 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-04-12 00:12:45.903 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==> Parameters: 到底要不要重复造轮子?(String), <p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>
<p>那这句有道理吗？</p>
<p>我个人觉得：</p>
<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>
<p>任何事情都有两面性</p>
<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>
<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>
<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>
<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>
<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>
<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>
<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>
<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>
<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>
<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>(String), 2(Integer), 36(Integer), 2(Integer), 6(Integer), 0(Integer), 1247423893702991872(String), 38(Integer)
2020-04-12 00:12:46.002 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -<==    Updates: 1
2020-04-12 00:12:46.016 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==>  Preparing: select * from bl_type where type_id = ? and deleted = 0 
2020-04-12 00:12:46.017 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==> Parameters: 6(Integer)
2020-04-12 00:12:46.066 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -<==      Total: 1
2020-04-12 00:12:51.630 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:12:51.681 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:12:51.682 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/getByBlog/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 6218(Long), {"code":20000,"data":[{"blog":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":35,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","version":38},"commentBlog":"1247423893702991872","commentContent":"ssss","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:09:48","id":"1249006746098253824"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:12:51.771 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:12:51.772 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/read/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 6319(Long), {"code":20000,"data":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":36,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","typeName":"java","version":38},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:12:51.859 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:12:51.860 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getGood/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 6404(Long), {"code":20000,"data":2,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:12:51.868 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:12:51.886 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:12:51.956 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:13:02.961 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.UserMapper.getById.debug:159 -==>  Preparing: select user_id, username, name, sex, header, nickname, user_email, created_time, update_time, version from bl_user where user_id = ? and deleted = 0 and version = ? 
2020-04-12 00:13:02.963 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.UserMapper.getById.debug:159 -==> Parameters: 3(Integer), 3(Integer)
2020-04-12 00:13:03.011 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.UserMapper.getById.debug:159 -<==      Total: 0
2020-04-12 00:13:14.358 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:13:14.358 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247423893702991872(String)
2020-04-12 00:13:14.406 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:13:14.611 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:13:14.612 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/save(String), [Comment(id=null, commentContent=sad, commentUser=null, user=null, commentBlog=1247423893702991872, blog=null, commentGood=null, createdTime=null, commentFlag=false)](String), 1(Integer), null, POST(String), 17436(Long), {"code":20000,"msg":"评论成功!"}(String), 127.0.0.1(String)
2020-04-12 00:13:14.704 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:13:18.213 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by created_time desc limit ?,? 
2020-04-12 00:13:18.213 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-12 00:13:18.317 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-12 00:13:18.365 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-12 00:13:18.367 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-12 00:13:18.410 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-12 00:13:18.460 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:13:18.461 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 246(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":36,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-11 16:12:43"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":13,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-11 15:17:04"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java","updateTime":"2020-04-11 15:19:19"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":2,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-02-17 07:11:31","typeName":"springboot","updateTime":"2020-04-11 13:33:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366723137474560","blogRead":5,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2019-09-09 03:32:55","typeName":"springboot","updateTime":"2020-04-11 14:11:27"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:13:18.555 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:13:20.097 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:13:20.097 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247423253719310336(String)
2020-04-12 00:13:20.144 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:13:20.146 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-04-12 00:13:20.147 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==> Parameters: dubbo监控中心dubbo-simple-monitor安装(String), <p>1、从百度上搜索下载dubbo-admin-2.*.war然后传输到linux的webapp目录下</p>
<p>建议更改一下war的名字</p>
<p><img src="https://img-blog.csdn.net/20180509211247640?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTM4MzI0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" /></p>
<p>2、访问公网地址/dubbo-admin</p>
<p>用户名密码都是dubbo</p>
<p>如果监控中心和注册中心在同一台服务器上，可以不需要任何配置。</p>
<p>如果不在同一台服务器，需要修改配置文件：</p>
<p>在tomcat的/webapps/dubbo-admin/WEB-INF/dubbo.properties</p>
<p><img src="https://img-blog.csdn.net/20180509211657191?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTM4MzI0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" /></p>
<p>这下知道为什么用户名和密码都是root了吧<br /><br /></p>(String), 1(Integer), 14(Integer), 14(Integer), 0(Integer), 1247423253719310336(String), 15(Integer)
2020-04-12 00:13:20.239 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -<==    Updates: 1
2020-04-12 00:13:20.239 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==>  Preparing: select * from bl_type where type_id = ? and deleted = 0 
2020-04-12 00:13:20.240 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==> Parameters: 14(Integer)
2020-04-12 00:13:20.284 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -<==      Total: 1
2020-04-12 00:13:25.943 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:13:25.945 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getCollection/1247423253719310336(String), [1247423253719310336](String), 1(Integer), null, GET(String), 50(Long), {"code":20000,"data":0,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:13:25.946 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:13:25.947 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getGood/1247423253719310336(String), [1247423253719310336](String), 1(Integer), null, GET(String), 50(Long), {"code":20000,"data":1,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:13:25.989 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:13:25.990 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/getByBlog/1247423253719310336(String), [1247423253719310336](String), 1(Integer), null, GET(String), 5633(Long), {"code":20000,"data":[],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:13:25.991 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:13:25.993 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/read/1247423253719310336(String), [1247423253719310336](String), 1(Integer), null, GET(String), 5941(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>1、从百度上搜索下载dubbo-admin-2.*.war然后传输到linux的webapp目录下</p>\n<p>建议更改一下war的名字</p>\n<p><img src=\"https://img-blog.csdn.net/20180509211247640?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTM4MzI0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" /></p>\n<p>2、访问公网地址/dubbo-admin</p>\n<p>用户名密码都是dubbo</p>\n<p>如果监控中心和注册中心在同一台服务器上，可以不需要任何配置。</p>\n<p>如果不在同一台服务器，需要修改配置文件：</p>\n<p>在tomcat的/webapps/dubbo-admin/WEB-INF/dubbo.properties</p>\n<p><img src=\"https://img-blog.csdn.net/20180509211657191?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTM4MzI0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" /></p>\n<p>这下知道为什么用户名和密码都是root了吧<br /><br /></p>","blogGoods":1,"blogId":"1247423253719310336","blogRead":14,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","blogType":14,"createdTime":"2020-04-07 07:17:33","typeName":"dubbo","version":15},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:13:26.031 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:13:26.038 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:13:26.078 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:13:26.082 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:13:29.471 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by created_time desc limit ?,? 
2020-04-12 00:13:29.472 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-12 00:13:29.522 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-12 00:13:29.573 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-12 00:13:29.574 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-12 00:13:29.621 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-12 00:13:29.672 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:13:29.673 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 199(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":36,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-11 16:12:43"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":14,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-11 16:13:17"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java","updateTime":"2020-04-11 15:19:19"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":2,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-02-17 07:11:31","typeName":"springboot","updateTime":"2020-04-11 13:33:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366723137474560","blogRead":5,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2019-09-09 03:32:55","typeName":"springboot","updateTime":"2020-04-11 14:11:27"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:13:29.768 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:13:31.737 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:13:31.738 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247423893702991872(String)
2020-04-12 00:13:31.788 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:13:31.789 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-04-12 00:13:31.789 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==> Parameters: 到底要不要重复造轮子?(String), <p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>
<p>那这句有道理吗？</p>
<p>我个人觉得：</p>
<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>
<p>任何事情都有两面性</p>
<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>
<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>
<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>
<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>
<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>
<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>
<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>
<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>
<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>
<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>(String), 2(Integer), 37(Integer), 2(Integer), 6(Integer), 0(Integer), 1247423893702991872(String), 39(Integer)
2020-04-12 00:13:31.889 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -<==    Updates: 1
2020-04-12 00:13:31.889 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==>  Preparing: select * from bl_type where type_id = ? and deleted = 0 
2020-04-12 00:13:31.890 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==> Parameters: 6(Integer)
2020-04-12 00:13:31.934 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -<==      Total: 1
2020-04-12 00:13:32.057 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:13:32.058 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getGood/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 52(Long), {"code":20000,"data":2,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:13:32.059 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:13:32.059 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getCollection/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 52(Long), {"code":20000,"data":2,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:13:32.149 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:13:32.152 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:13:32.156 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:13:32.157 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/getByBlog/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 151(Long), {"code":20000,"data":[{"blog":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":36,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","version":39},"commentBlog":"1247423893702991872","commentContent":"sad","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:13:02","id":"1249007556785946624"},{"blog":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":35,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","version":38},"commentBlog":"1247423893702991872","commentContent":"ssss","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:09:48","id":"1249006746098253824"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:13:32.298 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:13:32.365 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:13:32.366 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/read/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 435(Long), {"code":20000,"data":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":37,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","typeName":"java","version":39},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:13:32.458 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:14:39.503 DEBUG [main]com.lza.blog.BlogApplication.logStarting:53 -Running with Spring Boot v2.1.13.RELEASE, Spring v5.1.14.RELEASE
2020-04-12 00:15:13.943 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.UserMapper.isNotExist.debug:159 -==>  Preparing: select user_id, username,password, name, sex, header,deleted, nickname, user_email, created_time, update_time from bl_user where username = ? 
2020-04-12 00:15:13.962 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.UserMapper.isNotExist.debug:159 -==> Parameters: liuzian(String)
2020-04-12 00:15:14.028 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.UserMapper.isNotExist.debug:159 -<==      Total: 1
2020-04-12 00:15:14.146 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:15:14.148 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=liuzian, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 164(Long), {"code":20000,"data":{"user":{"createdTime":"2020-04-06 14:11:18","header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqWOAIDsBAAB28yzuliM075.jpg","name":"liuzian1","nickname":"昵称刘子安","password":"","sex":1,"updateTime":"2020-04-11 15:20:14","userEmail":"2282816304@qq.com","userId":3,"username":"liuzian"},"token":"14B459990D94645D97951EF13376817F"},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:15:14.235 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:15:15.764 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enable = 1 
2020-04-12 00:15:15.765 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-04-12 00:15:15.770 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin 
2020-04-12 00:15:15.771 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -==> Parameters: 
2020-04-12 00:15:15.797 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by (blog_goods+blog_read) desc limit 3 
2020-04-12 00:15:15.798 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-04-12 00:15:15.812 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-04-12 00:15:15.827 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -<==      Total: 1
2020-04-12 00:15:15.846 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 3
2020-04-12 00:15:15.853 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by created_time desc limit ?,? 
2020-04-12 00:15:15.855 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-12 00:15:15.861 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:15:15.862 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 108(Long), {"code":20000,"data":[{"artist":"薛之谦","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6NwLSAXMSaAABUQgn8TDQ402.jpg","id":4,"lrc":"我们都迁就嘴巴\n\n我们都憋着真话\n\n我们都让爱先发芽\n\n我们会接受惩罚\n\n有一个变成哑巴\n\n越退让越不会表达\n\n所有的安静都是人造的冷清\n\n所有的杂音在安慰后平静\n\n我不需要证明\n\n我不需要声音\n\n我就像一个哑巴一样\n\n你翻译不了我的声响\n\n怕腻烦过量\n\n我举止要限量\n\n你可以当我哑巴一样\n\n你不会看见我的抵抗\n\n请别怕我受伤 我自己会圆场\n\n我们会接受惩罚\n\n有一个变成哑巴\n\n越退让越不会表达\n\n所有的安静都是人造的冷清\n\n所有的杂音在安慰后平静\n\n我不需要证明\n\n我不需要声音\n\n我就像一个哑巴一样\n\n你翻译不了我的声响\n\n怕腻烦过量\n\n我举止要限量\n\n你可以当我哑巴一样\n\n你不会看见我的抵抗\n\n请别怕我受伤 我自己会圆场\n\n我就像一个哑巴一样\n\n反正我也不擅长抵抗","name":"哑巴","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6NwL2AQNqoAECd-iFlcLw799.mp3"},{"artist":"毛不易","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2tCAXf86AAEnuTs7KeY474.jpg","id":5,"lrc":"[00:00.02]李晓东 - 消愁(Live)\n[00:01.64]作词：毛不易\n[00:03.05]作曲：毛不易\n[00:04.47]原唱：毛不易\n[00:05.63]编曲：吴牧禅、范郡哲\n[00:07.65]program：吴牧禅\n[00:08.66]制作人：吴牧禅\n[00:06.24]花腔女高音：王莉\n[00:12.10]大提琴：翟慧莉\n[00:52.14]当你走进这欢乐场\n[00:56.69]背上所有的梦与想\n[01:01.19]各色的脸上各色的妆\n[01:06.08]没人记得你的模样\n[01:10.92]三巡酒过你在角落\n[01:15.46]固执地唱着苦涩的歌\n[01:20.51]听他在喧嚣里被淹没\n[01:24.93]你拿起酒杯对自己说\n[01:30.07]一杯敬朝阳\n[01:32.19]一杯敬月光\n[01:35.14]唤醒我的向往\n[01:37.27]温柔了寒窗\n[01:39.24]于是可以不回头地\n[01:41.92]逆风飞翔\n[01:44.34]不怕心头有雨\n[01:46.62]眼底有霜\n[01:49.28]一杯敬故乡\n[01:51.41]一杯敬远方\n[01:53.98]守着我的善良\n[01:56.49]催着我成长\n[01:58.31]所以南北的路\n[02:00.18]从此不再漫长\n[02:03.71]灵魂不再无处安放\n[02:32.70]当你走进这欢乐场\n[02:37.25]背上所有的梦与想\n[02:42.04]各色的脸上各色的妆\n[02:46.79]没人记得你的模样\n[02:51.69]三巡酒过你在角落\n[02:56.44]固执地唱着苦涩的歌\n[03:01.24]听他在喧嚣里被淹没\n[03:05.73]你拿起酒杯对自己说\n[03:15.93]一杯敬朝阳\n[03:17.69]一杯敬月光\n[03:20.75]唤醒我的向往\n[03:22.82]温柔了寒窗\n[03:24.64]于是可以不回头地\n[03:27.42]逆风飞翔\n[03:30.14]不怕心头有雨\n[03:32.21]眼底有霜\n[03:35.19]一杯敬故乡\n[03:36.96]一杯敬远方\n[03:39.63]守着我的善良\n[03:42.00]催着我成长\n[03:43.92]所以南北的路\n[03:45.72]从此不再漫长\n[03:49.26]灵魂不再无处安放\n[03:56.79]一杯敬明天\n[03:58.46]一杯敬过往\n[04:01.23]支撑我的身体\n[04:03.75]厚重了肩膀\n[04:05.52]虽然从不相信\n[04:07.34]所谓山高水长\n[04:10.84]人生苦短\n[04:12.07]何必念念不忘\n[04:15.76]一杯敬自由\n[04:17.79]一杯敬死亡\n[04:20.46]宽恕我的平凡\n[04:22.88]驱散了迷惘\n[04:24.69]好吧天亮之后\n[04:26.51]总是潦草离场\n[04:30.39]清醒的人最荒唐\n[04:34.58]好吧天亮之后\n[04:36.15]总是潦草离场\n[04:39.82]清醒的人最荒唐\n[04:48.92]一杯敬自由\n[04:50.79]一杯敬死亡\n[04:53.62]宽恕我的平凡\n[04:56.00]驱散了迷惘\n[04:57.87]好吧天亮之后\n[04:59.68]总是潦草离场\n[05:03.27]清醒的人最荒唐\n[05:07.45]好吧天亮之后\n[05:09.22]总是潦草离场\n[05:13.07]清醒的人最荒唐","name":"消愁 (Live)","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2tuAIYnhACuroacKT6g509.mp3"},{"artist":"许嵩","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2_OAQrF4AADgUZTFOG8276.jpg","id":6,"lrc":"清明雨上 - 许嵩 (Vae Xu)词：许嵩、安琪曲：许嵩窗透初晓 日照西桥 云自摇想你当年荷风微摆的衣角木雕鎏金 岁月涟漪 七年前封笔因为我今生挥毫只为你雨打湿了眼眶 年年倚井盼归堂最怕不觉泪已拆两行我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱远方有琴 愀然空灵 声声催天雨涓涓心事说给自己听月影憧憧 烟火几重 烛花红红尘旧梦 梦断都成空雨打湿了眼眶 年年倚井盼归堂最怕不觉泪已拆两行我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱","name":"清明雨上","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2_-AdPXAADb-sifc6g4167.mp3"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:15:15.876 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:15:15.877 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 127(Long), {"code":20000,"data":{"header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqEaAXJe9AAB28yzuliM858.jpg","id":1,"name":"刘子安","signature":"勤能补拙","username":"admin"},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:15:15.900 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:15:15.901 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, GET(String), 146(Long), {"code":20000,"data":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":37,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":14,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:15:15.908 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-12 00:15:15.955 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:15:15.955 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-12 00:15:15.955 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-12 00:15:15.972 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:15:15.994 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:15:16.007 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-12 00:15:16.168 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-04-12 00:15:16.168 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -==> Parameters: 
2020-04-12 00:15:16.215 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -<==      Total: 2
2020-04-12 00:15:16.220 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:15:16.221 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 263(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":37,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-11 16:13:29"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":14,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-11 16:13:17"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java","updateTime":"2020-04-11 15:19:19"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":2,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-02-17 07:11:31","typeName":"springboot","updateTime":"2020-04-11 13:33:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366723137474560","blogRead":5,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2019-09-09 03:32:55","typeName":"springboot","updateTime":"2020-04-11 14:11:27"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:15:16.264 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:15:16.265 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 213(Long), {"code":20000,"data":[{"createdTime":"2020-03-30 06:40:24","linkId":1,"linkName":"百度","linkUrl":"https://www.baidu.com","updateTime":"2020-04-08 14:20:23"},{"createdTime":"2020-03-30 06:52:22","linkId":2,"linkName":"github","linkUrl":"https://github.com/lza0807/blog","updateTime":"2020-03-30 06:52:22"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:15:16.315 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:15:16.354 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:15:23.328 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:15:23.330 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247423893702991872(String)
2020-04-12 00:15:23.387 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:15:23.389 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-04-12 00:15:23.389 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==> Parameters: 到底要不要重复造轮子?(String), <p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>
<p>那这句有道理吗？</p>
<p>我个人觉得：</p>
<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>
<p>任何事情都有两面性</p>
<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>
<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>
<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>
<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>
<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>
<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>
<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>
<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>
<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>
<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>(String), 2(Integer), 38(Integer), 2(Integer), 6(Integer), 0(Integer), 1247423893702991872(String), 40(Integer)
2020-04-12 00:15:23.486 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -<==    Updates: 1
2020-04-12 00:15:23.495 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==>  Preparing: select * from bl_type where type_id = ? and deleted = 0 
2020-04-12 00:15:23.498 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==> Parameters: 6(Integer)
2020-04-12 00:15:23.611 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -<==      Total: 1
2020-04-12 00:15:23.662 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:15:23.665 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:15:23.665 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getCollection/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 400(Long), {"code":20000,"data":2,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:15:23.667 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getGood/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 400(Long), {"code":20000,"data":2,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:15:23.758 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:15:23.761 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:15:23.813 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:15:23.814 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/read/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 546(Long), {"code":20000,"data":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":38,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","typeName":"java","version":40},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:15:23.839 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:15:23.840 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/getByBlog/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 566(Long), {"code":20000,"data":[{"blog":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":36,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","version":39},"commentBlog":"1247423893702991872","commentContent":"sad","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:13:02","id":"1249007556785946624"},{"blog":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":35,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","version":38},"commentBlog":"1247423893702991872","commentContent":"ssss","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:09:48","id":"1249006746098253824"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:15:23.904 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:15:23.943 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:16:36.831 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by (blog_goods+blog_read) desc limit 3 
2020-04-12 00:16:36.832 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-04-12 00:16:36.880 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:16:36.881 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247423893702991872(String)
2020-04-12 00:16:36.885 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin 
2020-04-12 00:16:36.885 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -==> Parameters: 
2020-04-12 00:16:36.886 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:16:36.887 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getCollection/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 9370(Long), {"code":20000,"data":2,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:16:36.887 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:16:36.889 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getGood/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 9371(Long), {"code":20000,"data":2,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:16:36.938 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -<==      Total: 1
2020-04-12 00:16:36.948 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:16:36.949 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-04-12 00:16:36.950 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==> Parameters: 到底要不要重复造轮子?(String), <p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>
<p>那这句有道理吗？</p>
<p>我个人觉得：</p>
<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>
<p>任何事情都有两面性</p>
<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>
<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>
<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>
<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>
<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>
<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>
<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>
<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>
<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>
<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>(String), 2(Integer), 39(Integer), 2(Integer), 6(Integer), 0(Integer), 1247423893702991872(String), 41(Integer)
2020-04-12 00:16:36.985 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:16:36.987 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:16:36.988 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 177(Long), {"code":20000,"data":{"header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqEaAXJe9AAB28yzuliM858.jpg","id":1,"name":"刘子安","signature":"勤能补拙","username":"admin"},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:16:36.992 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:16:37.058 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -<==    Updates: 1
2020-04-12 00:16:37.059 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==>  Preparing: select * from bl_type where type_id = ? and deleted = 0 
2020-04-12 00:16:37.059 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==> Parameters: 6(Integer)
2020-04-12 00:16:37.078 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:16:37.112 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -<==      Total: 1
2020-04-12 00:16:37.721 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 3
2020-04-12 00:16:37.860 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:16:37.861 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/read/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 10280(Long), {"code":20000,"data":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":39,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","typeName":"java","version":41},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:16:37.862 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:16:37.862 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, GET(String), 960(Long), {"code":20000,"data":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":38,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":14,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:16:38.038 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:16:38.055 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:18:23.030 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:18:23.032 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/getByBlog/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 115540(Long), {"code":20000,"data":[{"blog":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":36,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","version":39},"commentBlog":"1247423893702991872","commentContent":"sad","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:13:02","id":"1249007556785946624"},{"blog":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":35,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","version":38},"commentBlog":"1247423893702991872","commentContent":"ssss","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:09:48","id":"1249006746098253824"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:18:23.126 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:18:34.687 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:18:34.688 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247423893702991872(String)
2020-04-12 00:18:34.689 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by (blog_goods+blog_read) desc limit 3 
2020-04-12 00:18:34.690 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-04-12 00:18:34.691 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin 
2020-04-12 00:18:34.691 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -==> Parameters: 
2020-04-12 00:18:34.762 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:18:34.764 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getGood/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 5319(Long), {"code":20000,"data":2,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:18:34.766 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:18:34.767 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getCollection/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 76(Long), {"code":20000,"data":2,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:18:34.782 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:18:34.783 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-04-12 00:18:34.784 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==> Parameters: 到底要不要重复造轮子?(String), <p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>
<p>那这句有道理吗？</p>
<p>我个人觉得：</p>
<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>
<p>任何事情都有两面性</p>
<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>
<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>
<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>
<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>
<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>
<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>
<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>
<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>
<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>
<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>(String), 2(Integer), 40(Integer), 2(Integer), 6(Integer), 0(Integer), 1247423893702991872(String), 42(Integer)
2020-04-12 00:18:34.887 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -<==    Updates: 1
2020-04-12 00:18:34.888 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==>  Preparing: select * from bl_type where type_id = ? and deleted = 0 
2020-04-12 00:18:34.888 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==> Parameters: 6(Integer)
2020-04-12 00:18:34.916 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:18:34.933 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -<==      Total: 1
2020-04-12 00:18:35.005 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 3
2020-04-12 00:18:35.284 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -<==      Total: 1
2020-04-12 00:18:35.286 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:18:35.287 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, GET(String), 367(Long), {"code":20000,"data":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":39,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":14,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:18:35.332 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:18:35.334 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:18:35.334 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 646(Long), {"code":20000,"data":{"header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqEaAXJe9AAB28yzuliM858.jpg","id":1,"name":"刘子安","signature":"勤能补拙","username":"admin"},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:38.878 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:38.881 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:19:38.881 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/read/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 5972(Long), {"code":20000,"data":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":40,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","typeName":"java","version":42},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:38.924 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:38.927 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by created_time desc limit ?,? 
2020-04-12 00:19:38.927 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-12 00:19:38.972 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-12 00:19:38.973 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:39.000 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:19:39.001 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/getByBlog/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 69588(Long), {"code":20000,"data":[{"blog":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":36,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","version":39},"commentBlog":"1247423893702991872","commentContent":"sad","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:13:02","id":"1249007556785946624"},{"blog":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":35,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","version":38},"commentBlog":"1247423893702991872","commentContent":"ssss","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:09:48","id":"1249006746098253824"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:39.020 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-12 00:19:39.021 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-12 00:19:39.163 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:39.163 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-12 00:19:39.271 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:19:39.272 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 286(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":40,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-11 16:18:32"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":14,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-11 16:13:17"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java","updateTime":"2020-04-11 15:19:19"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":2,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-02-17 07:11:31","typeName":"springboot","updateTime":"2020-04-11 13:33:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366723137474560","blogRead":5,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2019-09-09 03:32:55","typeName":"springboot","updateTime":"2020-04-11 14:11:27"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:39.405 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:45.866 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by created_time desc limit ?,? 
2020-04-12 00:19:45.868 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-12 00:19:45.914 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-12 00:19:45.916 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by blog_goods desc limit ?,? 
2020-04-12 00:19:45.918 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-12 00:19:45.966 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-12 00:19:45.967 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-12 00:19:45.968 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-12 00:19:46.017 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-12 00:19:46.017 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-12 00:19:46.017 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-12 00:19:46.061 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-12 00:19:46.064 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:19:46.066 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 1208(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":40,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-11 16:18:32"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":14,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-11 16:13:17"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java","updateTime":"2020-04-11 15:19:19"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":2,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-02-17 07:11:31","typeName":"springboot","updateTime":"2020-04-11 13:33:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366723137474560","blogRead":5,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2019-09-09 03:32:55","typeName":"springboot","updateTime":"2020-04-11 14:11:27"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:46.109 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:19:46.109 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=blog_goods, sortMethod=desc)](String), 1(Integer), null, POST(String), 193(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":40,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-11 16:18:32"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java","updateTime":"2020-04-11 15:19:19"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":14,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-11 16:13:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366723137474560","blogRead":5,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2019-09-09 03:32:55","typeName":"springboot","updateTime":"2020-04-11 14:11:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":2,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-02-17 07:11:31","typeName":"springboot","updateTime":"2020-04-11 13:33:53"}],"pageSize":10,"params":{},"sortColumn":"blog_goods","sortMethod":"desc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:46.166 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:46.213 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:47.617 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:19:47.619 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247423893702991872(String)
2020-04-12 00:19:47.667 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:19:47.668 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-04-12 00:19:47.669 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==> Parameters: 到底要不要重复造轮子?(String), <p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>
<p>那这句有道理吗？</p>
<p>我个人觉得：</p>
<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>
<p>任何事情都有两面性</p>
<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>
<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>
<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>
<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>
<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>
<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>
<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>
<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>
<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>
<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>(String), 2(Integer), 41(Integer), 2(Integer), 6(Integer), 0(Integer), 1247423893702991872(String), 43(Integer)
2020-04-12 00:19:47.673 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:19:47.675 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/getByBlog/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 93(Long), {"code":20000,"data":[{"blog":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":36,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","version":39},"commentBlog":"1247423893702991872","commentContent":"sad","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:13:02","id":"1249007556785946624"},{"blog":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":35,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","version":38},"commentBlog":"1247423893702991872","commentContent":"ssss","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:09:48","id":"1249006746098253824"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:47.796 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -<==    Updates: 1
2020-04-12 00:19:47.797 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==>  Preparing: select * from bl_type where type_id = ? and deleted = 0 
2020-04-12 00:19:47.798 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==> Parameters: 6(Integer)
2020-04-12 00:19:47.798 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:47.842 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -<==      Total: 1
2020-04-12 00:19:47.924 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:19:47.925 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getGood/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 346(Long), {"code":20000,"data":2,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:47.933 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:19:47.934 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getCollection/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 355(Long), {"code":20000,"data":2,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:48.015 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:48.020 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:19:48.022 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/read/1247423893702991872(String), [1247423893702991872](String), 1(Integer), null, GET(String), 448(Long), {"code":20000,"data":{"blogCollection":2,"blogComment":0,"blogContent":"<p>到底要不要重复造轮子?<br />在软件开发领域有一句著名的话：不要重复造轮子</p>\n<p>那这句有道理吗？</p>\n<p>我个人觉得：</p>\n<p>这句话有道理，也没道理，这句话是有矛盾和冲突的！</p>\n<p>任何事情都有两面性</p>\n<p>我们必须要知道一件事情，在企业中工作的程序员，他们除了写代码之外，还有一件最重要的事情，就是帮老板赚钱，程序员怎么帮老板赚钱呢？那就是程序员靠写代码帮老板帮企业赚钱，对于老板和企业而言，老板并不关心程序员们具体怎么写代码，老板关心的是用最短的时间，最低的人工成本，实现利益最大化。(任何企业的第一使命都是赚钱，因为企业每天都要养活一大堆的员工)</p>\n<p>比如：老板要程序员们开发一款软件，然后程序员们就开始写代码，如果什么都要程序员自己从头开始写的话，那这个软件得开发到猴年马月，如果有现成的框架和工具拿来即用，那就可以大大的缩短开发时间，节省人工成本，企业就可以快速的实现利益最大化，这自然是老板喜欢的结果。</p>\n<p>所以说，如果你想缩短开发时间，节约人工成本，实现利益最大化，那就尽量的多多使用现成的轮子，不要重复造轮子</p>\n<p>但是我又特别建议大家多多造轮子，只有多造轮子，才能提高自己的编程能力，高手都是一点一点实践出来的</p>\n<p>对于初学者和学生来说，我建议多多造轮子，这样可以提高自己的动手能力，提高自己的编程能力，同时又可以锻炼自己的思考能力和分析问题和解决问题的能力，拓展自己的思维</p>\n<p>对于老手来说，尽量少造轮子，偶尔造造轮子也是OK的，无伤大雅，但是如果老手是出于研究学习的目的和心态的话，那就多多造轮子吧</p>\n<p>对于希望在最短的时间内实现利益最大化的话，那就少造轮子，直接用现成的轮子，因为这样可以快速的赚钱！</p>\n<p>所以综上所述，不要重复造轮子这句话本身是矛盾和冲突的，因为大家看问题的立场和角度不一样！</p>\n<p>对于企业和老板来说，企业和老板不希望程序员重复造轮子，因为这会耽误老板赚钱，挡了老板的财路</p>\n<p>对于程序员个人来说，我觉得在程序员编程水平还比较初级的时候，多多造轮子可以提高自己的动手能力和编程能力，对于编程水平中等的程序员，我建议也是多多造轮子，以此来提高自己的编程能力，对于高手程序员来说，他在成为高手之前的那些日子里就是天天在造轮子，因为他那时候如果不多多造轮子(如果他那时候不拼命反反复复写代码)，那他现在也不可能成为高手！所以，对于高手程序员来说，此时，可以不必重复造轮子了，如果他是出于精进、精益求精或者是出于研究和学习的目的，那他也可以适当的偶尔的造轮子，那也是OK的</p>","blogGoods":2,"blogId":"1247423893702991872","blogRead":41,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","typeName":"java","version":43},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:48.029 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:48.111 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:48.796 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by created_time desc limit ?,? 
2020-04-12 00:19:48.798 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-04-12 00:19:48.843 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-04-12 00:19:48.890 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 
2020-04-12 00:19:48.890 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-04-12 00:19:48.936 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-04-12 00:19:48.985 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:19:48.986 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 192(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":41,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java","updateTime":"2020-04-11 16:19:45"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":14,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo","updateTime":"2020-04-11 16:13:17"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java","updateTime":"2020-04-11 15:19:19"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247421732856291328","blogRead":2,"blogTitle":"SpringBoot-thymeleaf模板语法","createdTime":"2020-02-17 07:11:31","typeName":"springboot","updateTime":"2020-04-11 13:33:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1247366723137474560","blogRead":5,"blogRemark":"测试接口","blogTitle":"spring boot通用mapper配置","createdTime":"2019-09-09 03:32:55","typeName":"springboot","updateTime":"2020-04-11 14:11:27"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":5,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:49.081 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:51.753 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:19:51.753 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247421732856291328(String)
2020-04-12 00:19:51.799 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:19:51.800 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-04-12 00:19:51.801 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==> Parameters: SpringBoot-thymeleaf模板语法(String), <p>第一次用springboot构建项目，后台对象传给前台显示的时候，因为用的是thymeleaf模板，所以需要用它规定好的格式进行数据的动态显示，开始查看官方文档进行记录：</p>
<p>thymeleaf模板语法,都以th属性开头,如:&nbsp; &nbsp; &lt;span th:text="..."&gt;</p>
<h2 id="一thymeleaf-简单表达式">一,thymeleaf-简单表达式</h2>
<p><strong>1.变量表达式</strong></p>
<p>Thymeleaf模板引擎在进行模板渲染时，还会附带一个Context存放进行模板渲染的变量，在模板中定义的表达式本质上就是从Context中获取对应的变量的值&nbsp; &nbsp;如：&nbsp;&lt;p&gt;Today is: &lt;span th:text="${day}"&gt;2 November 2016&lt;/span&gt;.&lt;/p&gt;</p>
<p>假设day的值为2018年11月2日，那么渲染结果为：&lt;p&gt;Today is: 2018年11月2日.&lt;/p&gt;。<br />注意 : 渲染后,模板中span值2 November 2016将被覆盖，从中也可以看出，前台可以先放好静态的数据，当后台没有数据传过来的时候可以显示静态的数据进行显示，做好前后端分离。<br /><br /><strong>2.选择或星号表达式</strong></p>
<p>可以简单理解为内层是对外层对象的引用&nbsp; 如：</p>
<p>&lt;div th:object="${session.user}"&gt;<br />&nbsp; &nbsp; &lt;p&gt;Name: &lt;span th:text="*{firstName}"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Surname: &lt;span th:text="*{lastName}"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Nationality: &lt;span th:text="*{nationality}"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>
<p>等同于以下方式:</p>
<p>&lt;div&gt;<br />&nbsp; &lt;p&gt;Name: &lt;span th:text="${session.user.firstName}"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Surname: &lt;span th:text="${session.user.lastName}"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Nationality: &lt;span th:text="${session.user.nationality}"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>
<p>如果没有与th:object结合使用，*{}与${}效果一样，因为其范围自动扩展到context。<br /><br /></p>
<p><br /><strong>3.文字国际化表达式</strong></p>
<p>文字国际化表达式允许我们从一个外部文件获取区域文字信息(.properties)&nbsp;<br />使用Key-Value方式，还可以提供一组参数(可选).</p>
<p><strong>#{main.title}<br />#{message.entrycreated(${entryId})}</strong></p>
<p>模板引用:</p>
<p><strong>&lt;table&gt;<br />&nbsp; &nbsp; &lt;th th:text="#{header.address.city}"&gt;...&lt;/th&gt;<br />&nbsp; &nbsp; &lt;th th:text="#{header.address.country}"&gt;...&lt;/th&gt;<br />&lt;/table&gt;<br />4.URL表达式</strong></p>
<p>URL表达式指的是把一个有用的上下文或会话信息添加到URL，这个过程经常被叫做URL重写。&nbsp;<br />Thymeleaf对于URL的处理是通过语法@{&hellip;}来处理的</p>
<p>&lt;!&mdash; 绝对路径 &mdash;&gt;<br />&lt;!-- Will produce 'http://localhost:8080/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href="details.html" th:href="@{http://localhost:8080/gtvg/order/details(orderId=${o.id})}"&gt;view&lt;/a&gt;</p>
<p>&lt;!&mdash; 相对路径 带参数&mdash;&gt;<br />&lt;!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href="details.html" th:href="@{/order/details(orderId=${o.id})}"&gt;view&lt;/a&gt;</p>
<p>&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --&gt;<br />&lt;a href="details.html" th:href="@{/order/{orderId}/details(orderId=${o.id})}"&gt;view&lt;/a&gt;</p>
<p>Thymeleaf支持相对路径和绝对路径<br />(orderId=${o.id})表示将括号内的内容作为URL参数处理<br />@{...}表达式中可以通过{orderId}访问Context中的orderId变量<br />@{/order}是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order<br /><br /></p>
<h2 id="二thymeleaf-字面值">二.thymeleaf-字面值</h2>
<p>　&nbsp; &nbsp;1.文本文字：&rsquo;one text&rsquo;, &lsquo;Another one!&rsquo;,&hellip;&nbsp;<br />　　2.文字数量：0, 34, 3.0, 12.3,&hellip;&nbsp;<br />　　3.布尔型常量：true, false&nbsp;<br />　　4.空的文字：null&nbsp;<br />　　5.文字标记：one, sometext, main,&hellip;&nbsp;</p>
<h2 id="三thymeleaf-文本处理">三：thymeleaf-文本处理</h2>
<p>1.字符串拼接：+</p>
<p>&lt;span th:text="'Welcome to our application, ' + ${user.name} + '!'"&gt;</p>
<p>2.文字替换：|The name is ${name}|</p>
<p>&lt;span th:text="|Welcome to our application, ${user.name}!|"&gt;</p>
<p>相比以上两种方式都可以实现字符串合并,但是,|&hellip;|中只能包含变量表达式${&hellip;}，不能包含其他常量、条件表达式等。</p>
<p>&nbsp;</p>(String), 0(Integer), 3(Integer), 7(Integer), 0(Integer), 1247421732856291328(String), 3(Integer)
2020-04-12 00:19:51.802 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:19:51.803 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getCollection/1247421732856291328(String), [1247421732856291328](String), 1(Integer), null, GET(String), 78(Long), {"code":20000,"data":0,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:51.806 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:19:51.807 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getGood/1247421732856291328(String), [1247421732856291328](String), 1(Integer), null, GET(String), 79(Long), {"code":20000,"data":0,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:51.892 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -<==    Updates: 1
2020-04-12 00:19:51.893 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==>  Preparing: select * from bl_type where type_id = ? and deleted = 0 
2020-04-12 00:19:51.895 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==> Parameters: 7(Integer)
2020-04-12 00:19:51.896 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:51.901 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:51.940 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -<==      Total: 1
2020-04-12 00:19:52.072 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:19:52.072 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/getByBlog/1247421732856291328(String), [1247421732856291328](String), 1(Integer), null, GET(String), 92(Long), {"code":20000,"data":[],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:52.126 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:19:52.127 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/read/1247421732856291328(String), [1247421732856291328](String), 1(Integer), null, GET(String), 416(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>第一次用springboot构建项目，后台对象传给前台显示的时候，因为用的是thymeleaf模板，所以需要用它规定好的格式进行数据的动态显示，开始查看官方文档进行记录：</p>\n<p>thymeleaf模板语法,都以th属性开头,如:&nbsp; &nbsp; &lt;span th:text=\"...\"&gt;</p>\n<h2 id=\"一thymeleaf-简单表达式\">一,thymeleaf-简单表达式</h2>\n<p><strong>1.变量表达式</strong></p>\n<p>Thymeleaf模板引擎在进行模板渲染时，还会附带一个Context存放进行模板渲染的变量，在模板中定义的表达式本质上就是从Context中获取对应的变量的值&nbsp; &nbsp;如：&nbsp;&lt;p&gt;Today is: &lt;span th:text=\"${day}\"&gt;2 November 2016&lt;/span&gt;.&lt;/p&gt;</p>\n<p>假设day的值为2018年11月2日，那么渲染结果为：&lt;p&gt;Today is: 2018年11月2日.&lt;/p&gt;。<br />注意 : 渲染后,模板中span值2 November 2016将被覆盖，从中也可以看出，前台可以先放好静态的数据，当后台没有数据传过来的时候可以显示静态的数据进行显示，做好前后端分离。<br /><br /><strong>2.选择或星号表达式</strong></p>\n<p>可以简单理解为内层是对外层对象的引用&nbsp; 如：</p>\n<p>&lt;div th:object=\"${session.user}\"&gt;<br />&nbsp; &nbsp; &lt;p&gt;Name: &lt;span th:text=\"*{firstName}\"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Surname: &lt;span th:text=\"*{lastName}\"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Nationality: &lt;span th:text=\"*{nationality}\"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>\n<p>等同于以下方式:</p>\n<p>&lt;div&gt;<br />&nbsp; &lt;p&gt;Name: &lt;span th:text=\"${session.user.firstName}\"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Surname: &lt;span th:text=\"${session.user.lastName}\"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Nationality: &lt;span th:text=\"${session.user.nationality}\"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>\n<p>如果没有与th:object结合使用，*{}与${}效果一样，因为其范围自动扩展到context。<br /><br /></p>\n<p><br /><strong>3.文字国际化表达式</strong></p>\n<p>文字国际化表达式允许我们从一个外部文件获取区域文字信息(.properties)&nbsp;<br />使用Key-Value方式，还可以提供一组参数(可选).</p>\n<p><strong>#{main.title}<br />#{message.entrycreated(${entryId})}</strong></p>\n<p>模板引用:</p>\n<p><strong>&lt;table&gt;<br />&nbsp; &nbsp; &lt;th th:text=\"#{header.address.city}\"&gt;...&lt;/th&gt;<br />&nbsp; &nbsp; &lt;th th:text=\"#{header.address.country}\"&gt;...&lt;/th&gt;<br />&lt;/table&gt;<br />4.URL表达式</strong></p>\n<p>URL表达式指的是把一个有用的上下文或会话信息添加到URL，这个过程经常被叫做URL重写。&nbsp;<br />Thymeleaf对于URL的处理是通过语法@{&hellip;}来处理的</p>\n<p>&lt;!&mdash; 绝对路径 &mdash;&gt;<br />&lt;!-- Will produce 'http://localhost:8080/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{http://localhost:8080/gtvg/order/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>&lt;!&mdash; 相对路径 带参数&mdash;&gt;<br />&lt;!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{/order/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{/order/{orderId}/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>Thymeleaf支持相对路径和绝对路径<br />(orderId=${o.id})表示将括号内的内容作为URL参数处理<br />@{...}表达式中可以通过{orderId}访问Context中的orderId变量<br />@{/order}是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order<br /><br /></p>\n<h2 id=\"二thymeleaf-字面值\">二.thymeleaf-字面值</h2>\n<p>　&nbsp; &nbsp;1.文本文字：&rsquo;one text&rsquo;, &lsquo;Another one!&rsquo;,&hellip;&nbsp;<br />　　2.文字数量：0, 34, 3.0, 12.3,&hellip;&nbsp;<br />　　3.布尔型常量：true, false&nbsp;<br />　　4.空的文字：null&nbsp;<br />　　5.文字标记：one, sometext, main,&hellip;&nbsp;</p>\n<h2 id=\"三thymeleaf-文本处理\">三：thymeleaf-文本处理</h2>\n<p>1.字符串拼接：+</p>\n<p>&lt;span th:text=\"'Welcome to our application, ' + ${user.name} + '!'\"&gt;</p>\n<p>2.文字替换：|The name is ${name}|</p>\n<p>&lt;span th:text=\"|Welcome to our application, ${user.name}!|\"&gt;</p>\n<p>相比以上两种方式都可以实现字符串合并,但是,|&hellip;|中只能包含变量表达式${&hellip;}，不能包含其他常量、条件表达式等。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1247421732856291328","blogRead":3,"blogTitle":"SpringBoot-thymeleaf模板语法","blogType":7,"createdTime":"2020-02-17 07:11:31","typeName":"springboot","version":3},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:19:52.162 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:19:52.217 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:20:06.132 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.UserMapper.getById.debug:159 -==>  Preparing: select user_id, username, name, sex, header, nickname, user_email, created_time, update_time, version from bl_user where user_id = ? and deleted = 0 
2020-04-12 00:20:06.134 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.UserMapper.getById.debug:159 -==> Parameters: 3(Integer)
2020-04-12 00:20:06.188 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.UserMapper.getById.debug:159 -<==      Total: 1
2020-04-12 00:20:09.856 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:20:09.857 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247421732856291328(String)
2020-04-12 00:20:09.901 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:20:10.022 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:20:10.022 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/save(String), [Comment(id=null, commentContent=ssadsaas, commentUser=null, user=null, commentBlog=1247421732856291328, blog=null, commentGood=null, createdTime=null, commentFlag=false)](String), 1(Integer), null, POST(String), 12661(Long), {"code":20000,"msg":"评论成功!"}(String), 127.0.0.1(String)
2020-04-12 00:20:10.133 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:20:26.752 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin 
2020-04-12 00:20:26.753 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -==> Parameters: 
2020-04-12 00:20:26.817 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:20:26.818 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.AdminMapper.getAdminInfo.debug:159 -<==      Total: 1
2020-04-12 00:20:26.818 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247421732856291328(String)
2020-04-12 00:20:26.820 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:20:26.821 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getCollection/1247421732856291328(String), [1247421732856291328](String), 1(Integer), null, GET(String), 48(Long), {"code":20000,"data":0,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:20:26.854 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:20:26.855 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getGood/1247421732856291328(String), [1247421732856291328](String), 1(Integer), null, GET(String), 98(Long), {"code":20000,"data":0,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:20:26.864 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:20:26.864 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-04-12 00:20:26.865 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==> Parameters: SpringBoot-thymeleaf模板语法(String), <p>第一次用springboot构建项目，后台对象传给前台显示的时候，因为用的是thymeleaf模板，所以需要用它规定好的格式进行数据的动态显示，开始查看官方文档进行记录：</p>
<p>thymeleaf模板语法,都以th属性开头,如:&nbsp; &nbsp; &lt;span th:text="..."&gt;</p>
<h2 id="一thymeleaf-简单表达式">一,thymeleaf-简单表达式</h2>
<p><strong>1.变量表达式</strong></p>
<p>Thymeleaf模板引擎在进行模板渲染时，还会附带一个Context存放进行模板渲染的变量，在模板中定义的表达式本质上就是从Context中获取对应的变量的值&nbsp; &nbsp;如：&nbsp;&lt;p&gt;Today is: &lt;span th:text="${day}"&gt;2 November 2016&lt;/span&gt;.&lt;/p&gt;</p>
<p>假设day的值为2018年11月2日，那么渲染结果为：&lt;p&gt;Today is: 2018年11月2日.&lt;/p&gt;。<br />注意 : 渲染后,模板中span值2 November 2016将被覆盖，从中也可以看出，前台可以先放好静态的数据，当后台没有数据传过来的时候可以显示静态的数据进行显示，做好前后端分离。<br /><br /><strong>2.选择或星号表达式</strong></p>
<p>可以简单理解为内层是对外层对象的引用&nbsp; 如：</p>
<p>&lt;div th:object="${session.user}"&gt;<br />&nbsp; &nbsp; &lt;p&gt;Name: &lt;span th:text="*{firstName}"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Surname: &lt;span th:text="*{lastName}"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Nationality: &lt;span th:text="*{nationality}"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>
<p>等同于以下方式:</p>
<p>&lt;div&gt;<br />&nbsp; &lt;p&gt;Name: &lt;span th:text="${session.user.firstName}"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Surname: &lt;span th:text="${session.user.lastName}"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Nationality: &lt;span th:text="${session.user.nationality}"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>
<p>如果没有与th:object结合使用，*{}与${}效果一样，因为其范围自动扩展到context。<br /><br /></p>
<p><br /><strong>3.文字国际化表达式</strong></p>
<p>文字国际化表达式允许我们从一个外部文件获取区域文字信息(.properties)&nbsp;<br />使用Key-Value方式，还可以提供一组参数(可选).</p>
<p><strong>#{main.title}<br />#{message.entrycreated(${entryId})}</strong></p>
<p>模板引用:</p>
<p><strong>&lt;table&gt;<br />&nbsp; &nbsp; &lt;th th:text="#{header.address.city}"&gt;...&lt;/th&gt;<br />&nbsp; &nbsp; &lt;th th:text="#{header.address.country}"&gt;...&lt;/th&gt;<br />&lt;/table&gt;<br />4.URL表达式</strong></p>
<p>URL表达式指的是把一个有用的上下文或会话信息添加到URL，这个过程经常被叫做URL重写。&nbsp;<br />Thymeleaf对于URL的处理是通过语法@{&hellip;}来处理的</p>
<p>&lt;!&mdash; 绝对路径 &mdash;&gt;<br />&lt;!-- Will produce 'http://localhost:8080/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href="details.html" th:href="@{http://localhost:8080/gtvg/order/details(orderId=${o.id})}"&gt;view&lt;/a&gt;</p>
<p>&lt;!&mdash; 相对路径 带参数&mdash;&gt;<br />&lt;!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href="details.html" th:href="@{/order/details(orderId=${o.id})}"&gt;view&lt;/a&gt;</p>
<p>&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --&gt;<br />&lt;a href="details.html" th:href="@{/order/{orderId}/details(orderId=${o.id})}"&gt;view&lt;/a&gt;</p>
<p>Thymeleaf支持相对路径和绝对路径<br />(orderId=${o.id})表示将括号内的内容作为URL参数处理<br />@{...}表达式中可以通过{orderId}访问Context中的orderId变量<br />@{/order}是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order<br /><br /></p>
<h2 id="二thymeleaf-字面值">二.thymeleaf-字面值</h2>
<p>　&nbsp; &nbsp;1.文本文字：&rsquo;one text&rsquo;, &lsquo;Another one!&rsquo;,&hellip;&nbsp;<br />　　2.文字数量：0, 34, 3.0, 12.3,&hellip;&nbsp;<br />　　3.布尔型常量：true, false&nbsp;<br />　　4.空的文字：null&nbsp;<br />　　5.文字标记：one, sometext, main,&hellip;&nbsp;</p>
<h2 id="三thymeleaf-文本处理">三：thymeleaf-文本处理</h2>
<p>1.字符串拼接：+</p>
<p>&lt;span th:text="'Welcome to our application, ' + ${user.name} + '!'"&gt;</p>
<p>2.文字替换：|The name is ${name}|</p>
<p>&lt;span th:text="|Welcome to our application, ${user.name}!|"&gt;</p>
<p>相比以上两种方式都可以实现字符串合并,但是,|&hellip;|中只能包含变量表达式${&hellip;}，不能包含其他常量、条件表达式等。</p>
<p>&nbsp;</p>(String), 0(Integer), 4(Integer), 7(Integer), 0(Integer), 1247421732856291328(String), 4(Integer)
2020-04-12 00:20:26.865 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:20:26.866 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 120(Long), {"code":20000,"data":{"header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqEaAXJe9AAB28yzuliM858.jpg","id":1,"name":"刘子安","signature":"勤能补拙","username":"admin"},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:20:26.918 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:20:26.960 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:20:26.961 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:20:26.961 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -<==    Updates: 1
2020-04-12 00:20:26.961 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==>  Preparing: select * from bl_type where type_id = ? and deleted = 0 
2020-04-12 00:20:26.962 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/getByBlog/1247421732856291328(String), [1247421732856291328](String), 1(Integer), null, GET(String), 181(Long), {"code":20000,"data":[{"blog":{"blogCollection":0,"blogComment":0,"blogContent":"<p>第一次用springboot构建项目，后台对象传给前台显示的时候，因为用的是thymeleaf模板，所以需要用它规定好的格式进行数据的动态显示，开始查看官方文档进行记录：</p>\n<p>thymeleaf模板语法,都以th属性开头,如:&nbsp; &nbsp; &lt;span th:text=\"...\"&gt;</p>\n<h2 id=\"一thymeleaf-简单表达式\">一,thymeleaf-简单表达式</h2>\n<p><strong>1.变量表达式</strong></p>\n<p>Thymeleaf模板引擎在进行模板渲染时，还会附带一个Context存放进行模板渲染的变量，在模板中定义的表达式本质上就是从Context中获取对应的变量的值&nbsp; &nbsp;如：&nbsp;&lt;p&gt;Today is: &lt;span th:text=\"${day}\"&gt;2 November 2016&lt;/span&gt;.&lt;/p&gt;</p>\n<p>假设day的值为2018年11月2日，那么渲染结果为：&lt;p&gt;Today is: 2018年11月2日.&lt;/p&gt;。<br />注意 : 渲染后,模板中span值2 November 2016将被覆盖，从中也可以看出，前台可以先放好静态的数据，当后台没有数据传过来的时候可以显示静态的数据进行显示，做好前后端分离。<br /><br /><strong>2.选择或星号表达式</strong></p>\n<p>可以简单理解为内层是对外层对象的引用&nbsp; 如：</p>\n<p>&lt;div th:object=\"${session.user}\"&gt;<br />&nbsp; &nbsp; &lt;p&gt;Name: &lt;span th:text=\"*{firstName}\"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Surname: &lt;span th:text=\"*{lastName}\"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Nationality: &lt;span th:text=\"*{nationality}\"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>\n<p>等同于以下方式:</p>\n<p>&lt;div&gt;<br />&nbsp; &lt;p&gt;Name: &lt;span th:text=\"${session.user.firstName}\"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Surname: &lt;span th:text=\"${session.user.lastName}\"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Nationality: &lt;span th:text=\"${session.user.nationality}\"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>\n<p>如果没有与th:object结合使用，*{}与${}效果一样，因为其范围自动扩展到context。<br /><br /></p>\n<p><br /><strong>3.文字国际化表达式</strong></p>\n<p>文字国际化表达式允许我们从一个外部文件获取区域文字信息(.properties)&nbsp;<br />使用Key-Value方式，还可以提供一组参数(可选).</p>\n<p><strong>#{main.title}<br />#{message.entrycreated(${entryId})}</strong></p>\n<p>模板引用:</p>\n<p><strong>&lt;table&gt;<br />&nbsp; &nbsp; &lt;th th:text=\"#{header.address.city}\"&gt;...&lt;/th&gt;<br />&nbsp; &nbsp; &lt;th th:text=\"#{header.address.country}\"&gt;...&lt;/th&gt;<br />&lt;/table&gt;<br />4.URL表达式</strong></p>\n<p>URL表达式指的是把一个有用的上下文或会话信息添加到URL，这个过程经常被叫做URL重写。&nbsp;<br />Thymeleaf对于URL的处理是通过语法@{&hellip;}来处理的</p>\n<p>&lt;!&mdash; 绝对路径 &mdash;&gt;<br />&lt;!-- Will produce 'http://localhost:8080/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{http://localhost:8080/gtvg/order/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>&lt;!&mdash; 相对路径 带参数&mdash;&gt;<br />&lt;!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{/order/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{/order/{orderId}/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>Thymeleaf支持相对路径和绝对路径<br />(orderId=${o.id})表示将括号内的内容作为URL参数处理<br />@{...}表达式中可以通过{orderId}访问Context中的orderId变量<br />@{/order}是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order<br /><br /></p>\n<h2 id=\"二thymeleaf-字面值\">二.thymeleaf-字面值</h2>\n<p>　&nbsp; &nbsp;1.文本文字：&rsquo;one text&rsquo;, &lsquo;Another one!&rsquo;,&hellip;&nbsp;<br />　　2.文字数量：0, 34, 3.0, 12.3,&hellip;&nbsp;<br />　　3.布尔型常量：true, false&nbsp;<br />　　4.空的文字：null&nbsp;<br />　　5.文字标记：one, sometext, main,&hellip;&nbsp;</p>\n<h2 id=\"三thymeleaf-文本处理\">三：thymeleaf-文本处理</h2>\n<p>1.字符串拼接：+</p>\n<p>&lt;span th:text=\"'Welcome to our application, ' + ${user.name} + '!'\"&gt;</p>\n<p>2.文字替换：|The name is ${name}|</p>\n<p>&lt;span th:text=\"|Welcome to our application, ${user.name}!|\"&gt;</p>\n<p>相比以上两种方式都可以实现字符串合并,但是,|&hellip;|中只能包含变量表达式${&hellip;}，不能包含其他常量、条件表达式等。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1247421732856291328","blogRead":3,"blogTitle":"SpringBoot-thymeleaf模板语法","blogType":7,"createdTime":"2020-02-17 07:11:31","version":4},"commentBlog":"1247421732856291328","commentContent":"ssadsaas","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:20:05","id":"1249009332071260160","user":{"createdTime":"2020-04-06 14:11:18","header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqWOAIDsBAAB28yzuliM075.jpg","name":"liuzian1","nickname":"昵称刘子安","sex":1,"updateTime":"2020-04-11 15:20:14","userEmail":"2282816304@qq.com","userId":3,"username":"liuzian","version":8}}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:20:26.962 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -==> Parameters: 7(Integer)
2020-04-12 00:20:26.964 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:20:27.008 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.TypeMapper.getTypeInfoById.debug:159 -<==      Total: 1
2020-04-12 00:20:27.046 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title,blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time,type_name from bl_blog b inner join bl_type t on b.blog_type = t.type_id where b.deleted = 0 and t.deleted = 0 order by (blog_goods+blog_read) desc limit 3 
2020-04-12 00:20:27.047 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-04-12 00:20:27.093 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 3
2020-04-12 00:20:27.124 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:20:27.142 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:20:27.143 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, GET(String), 98(Long), {"code":20000,"data":[{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":41,"blogTitle":"到底要不要重复造轮子?","createdTime":"2020-04-07 07:20:06","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":1,"blogId":"1247423253719310336","blogRead":14,"blogTitle":"dubbo监控中心dubbo-simple-monitor安装","createdTime":"2020-04-07 07:17:33","typeName":"dubbo"},{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","createdTime":"2020-03-27 03:27:38","typeName":"java"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:20:27.186 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:20:27.187 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/read/1247421732856291328(String), [1247421732856291328](String), 1(Integer), null, GET(String), 441(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>第一次用springboot构建项目，后台对象传给前台显示的时候，因为用的是thymeleaf模板，所以需要用它规定好的格式进行数据的动态显示，开始查看官方文档进行记录：</p>\n<p>thymeleaf模板语法,都以th属性开头,如:&nbsp; &nbsp; &lt;span th:text=\"...\"&gt;</p>\n<h2 id=\"一thymeleaf-简单表达式\">一,thymeleaf-简单表达式</h2>\n<p><strong>1.变量表达式</strong></p>\n<p>Thymeleaf模板引擎在进行模板渲染时，还会附带一个Context存放进行模板渲染的变量，在模板中定义的表达式本质上就是从Context中获取对应的变量的值&nbsp; &nbsp;如：&nbsp;&lt;p&gt;Today is: &lt;span th:text=\"${day}\"&gt;2 November 2016&lt;/span&gt;.&lt;/p&gt;</p>\n<p>假设day的值为2018年11月2日，那么渲染结果为：&lt;p&gt;Today is: 2018年11月2日.&lt;/p&gt;。<br />注意 : 渲染后,模板中span值2 November 2016将被覆盖，从中也可以看出，前台可以先放好静态的数据，当后台没有数据传过来的时候可以显示静态的数据进行显示，做好前后端分离。<br /><br /><strong>2.选择或星号表达式</strong></p>\n<p>可以简单理解为内层是对外层对象的引用&nbsp; 如：</p>\n<p>&lt;div th:object=\"${session.user}\"&gt;<br />&nbsp; &nbsp; &lt;p&gt;Name: &lt;span th:text=\"*{firstName}\"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Surname: &lt;span th:text=\"*{lastName}\"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Nationality: &lt;span th:text=\"*{nationality}\"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>\n<p>等同于以下方式:</p>\n<p>&lt;div&gt;<br />&nbsp; &lt;p&gt;Name: &lt;span th:text=\"${session.user.firstName}\"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Surname: &lt;span th:text=\"${session.user.lastName}\"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Nationality: &lt;span th:text=\"${session.user.nationality}\"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>\n<p>如果没有与th:object结合使用，*{}与${}效果一样，因为其范围自动扩展到context。<br /><br /></p>\n<p><br /><strong>3.文字国际化表达式</strong></p>\n<p>文字国际化表达式允许我们从一个外部文件获取区域文字信息(.properties)&nbsp;<br />使用Key-Value方式，还可以提供一组参数(可选).</p>\n<p><strong>#{main.title}<br />#{message.entrycreated(${entryId})}</strong></p>\n<p>模板引用:</p>\n<p><strong>&lt;table&gt;<br />&nbsp; &nbsp; &lt;th th:text=\"#{header.address.city}\"&gt;...&lt;/th&gt;<br />&nbsp; &nbsp; &lt;th th:text=\"#{header.address.country}\"&gt;...&lt;/th&gt;<br />&lt;/table&gt;<br />4.URL表达式</strong></p>\n<p>URL表达式指的是把一个有用的上下文或会话信息添加到URL，这个过程经常被叫做URL重写。&nbsp;<br />Thymeleaf对于URL的处理是通过语法@{&hellip;}来处理的</p>\n<p>&lt;!&mdash; 绝对路径 &mdash;&gt;<br />&lt;!-- Will produce 'http://localhost:8080/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{http://localhost:8080/gtvg/order/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>&lt;!&mdash; 相对路径 带参数&mdash;&gt;<br />&lt;!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{/order/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{/order/{orderId}/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>Thymeleaf支持相对路径和绝对路径<br />(orderId=${o.id})表示将括号内的内容作为URL参数处理<br />@{...}表达式中可以通过{orderId}访问Context中的orderId变量<br />@{/order}是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order<br /><br /></p>\n<h2 id=\"二thymeleaf-字面值\">二.thymeleaf-字面值</h2>\n<p>　&nbsp; &nbsp;1.文本文字：&rsquo;one text&rsquo;, &lsquo;Another one!&rsquo;,&hellip;&nbsp;<br />　　2.文字数量：0, 34, 3.0, 12.3,&hellip;&nbsp;<br />　　3.布尔型常量：true, false&nbsp;<br />　　4.空的文字：null&nbsp;<br />　　5.文字标记：one, sometext, main,&hellip;&nbsp;</p>\n<h2 id=\"三thymeleaf-文本处理\">三：thymeleaf-文本处理</h2>\n<p>1.字符串拼接：+</p>\n<p>&lt;span th:text=\"'Welcome to our application, ' + ${user.name} + '!'\"&gt;</p>\n<p>2.文字替换：|The name is ${name}|</p>\n<p>&lt;span th:text=\"|Welcome to our application, ${user.name}!|\"&gt;</p>\n<p>相比以上两种方式都可以实现字符串合并,但是,|&hellip;|中只能包含变量表达式${&hellip;}，不能包含其他常量、条件表达式等。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1247421732856291328","blogRead":4,"blogTitle":"SpringBoot-thymeleaf模板语法","blogType":7,"createdTime":"2020-02-17 07:11:31","typeName":"springboot","version":4},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:20:27.254 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:20:27.303 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:20:27.308 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enable = 1 
2020-04-12 00:20:27.308 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-04-12 00:20:27.315 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-04-12 00:20:27.315 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -==> Parameters: 
2020-04-12 00:20:27.359 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LinkMapper.getAllLinkInfo.debug:159 -<==      Total: 2
2020-04-12 00:20:27.386 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-04-12 00:20:27.407 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:20:27.408 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 93(Long), {"code":20000,"data":[{"createdTime":"2020-03-30 06:40:24","linkId":1,"linkName":"百度","linkUrl":"https://www.baidu.com","updateTime":"2020-04-08 14:20:23"},{"createdTime":"2020-03-30 06:52:22","linkId":2,"linkName":"github","linkUrl":"https://github.com/lza0807/blog","updateTime":"2020-03-30 06:52:22"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:20:27.465 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:20:27.466 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 162(Long), {"code":20000,"data":[{"artist":"薛之谦","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6NwLSAXMSaAABUQgn8TDQ402.jpg","id":4,"lrc":"我们都迁就嘴巴\n\n我们都憋着真话\n\n我们都让爱先发芽\n\n我们会接受惩罚\n\n有一个变成哑巴\n\n越退让越不会表达\n\n所有的安静都是人造的冷清\n\n所有的杂音在安慰后平静\n\n我不需要证明\n\n我不需要声音\n\n我就像一个哑巴一样\n\n你翻译不了我的声响\n\n怕腻烦过量\n\n我举止要限量\n\n你可以当我哑巴一样\n\n你不会看见我的抵抗\n\n请别怕我受伤 我自己会圆场\n\n我们会接受惩罚\n\n有一个变成哑巴\n\n越退让越不会表达\n\n所有的安静都是人造的冷清\n\n所有的杂音在安慰后平静\n\n我不需要证明\n\n我不需要声音\n\n我就像一个哑巴一样\n\n你翻译不了我的声响\n\n怕腻烦过量\n\n我举止要限量\n\n你可以当我哑巴一样\n\n你不会看见我的抵抗\n\n请别怕我受伤 我自己会圆场\n\n我就像一个哑巴一样\n\n反正我也不擅长抵抗","name":"哑巴","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6NwL2AQNqoAECd-iFlcLw799.mp3"},{"artist":"毛不易","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2tCAXf86AAEnuTs7KeY474.jpg","id":5,"lrc":"[00:00.02]李晓东 - 消愁(Live)\n[00:01.64]作词：毛不易\n[00:03.05]作曲：毛不易\n[00:04.47]原唱：毛不易\n[00:05.63]编曲：吴牧禅、范郡哲\n[00:07.65]program：吴牧禅\n[00:08.66]制作人：吴牧禅\n[00:06.24]花腔女高音：王莉\n[00:12.10]大提琴：翟慧莉\n[00:52.14]当你走进这欢乐场\n[00:56.69]背上所有的梦与想\n[01:01.19]各色的脸上各色的妆\n[01:06.08]没人记得你的模样\n[01:10.92]三巡酒过你在角落\n[01:15.46]固执地唱着苦涩的歌\n[01:20.51]听他在喧嚣里被淹没\n[01:24.93]你拿起酒杯对自己说\n[01:30.07]一杯敬朝阳\n[01:32.19]一杯敬月光\n[01:35.14]唤醒我的向往\n[01:37.27]温柔了寒窗\n[01:39.24]于是可以不回头地\n[01:41.92]逆风飞翔\n[01:44.34]不怕心头有雨\n[01:46.62]眼底有霜\n[01:49.28]一杯敬故乡\n[01:51.41]一杯敬远方\n[01:53.98]守着我的善良\n[01:56.49]催着我成长\n[01:58.31]所以南北的路\n[02:00.18]从此不再漫长\n[02:03.71]灵魂不再无处安放\n[02:32.70]当你走进这欢乐场\n[02:37.25]背上所有的梦与想\n[02:42.04]各色的脸上各色的妆\n[02:46.79]没人记得你的模样\n[02:51.69]三巡酒过你在角落\n[02:56.44]固执地唱着苦涩的歌\n[03:01.24]听他在喧嚣里被淹没\n[03:05.73]你拿起酒杯对自己说\n[03:15.93]一杯敬朝阳\n[03:17.69]一杯敬月光\n[03:20.75]唤醒我的向往\n[03:22.82]温柔了寒窗\n[03:24.64]于是可以不回头地\n[03:27.42]逆风飞翔\n[03:30.14]不怕心头有雨\n[03:32.21]眼底有霜\n[03:35.19]一杯敬故乡\n[03:36.96]一杯敬远方\n[03:39.63]守着我的善良\n[03:42.00]催着我成长\n[03:43.92]所以南北的路\n[03:45.72]从此不再漫长\n[03:49.26]灵魂不再无处安放\n[03:56.79]一杯敬明天\n[03:58.46]一杯敬过往\n[04:01.23]支撑我的身体\n[04:03.75]厚重了肩膀\n[04:05.52]虽然从不相信\n[04:07.34]所谓山高水长\n[04:10.84]人生苦短\n[04:12.07]何必念念不忘\n[04:15.76]一杯敬自由\n[04:17.79]一杯敬死亡\n[04:20.46]宽恕我的平凡\n[04:22.88]驱散了迷惘\n[04:24.69]好吧天亮之后\n[04:26.51]总是潦草离场\n[04:30.39]清醒的人最荒唐\n[04:34.58]好吧天亮之后\n[04:36.15]总是潦草离场\n[04:39.82]清醒的人最荒唐\n[04:48.92]一杯敬自由\n[04:50.79]一杯敬死亡\n[04:53.62]宽恕我的平凡\n[04:56.00]驱散了迷惘\n[04:57.87]好吧天亮之后\n[04:59.68]总是潦草离场\n[05:03.27]清醒的人最荒唐\n[05:07.45]好吧天亮之后\n[05:09.22]总是潦草离场\n[05:13.07]清醒的人最荒唐","name":"消愁 (Live)","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2tuAIYnhACuroacKT6g509.mp3"},{"artist":"许嵩","cover":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2_OAQrF4AADgUZTFOG8276.jpg","id":6,"lrc":"清明雨上 - 许嵩 (Vae Xu)词：许嵩、安琪曲：许嵩窗透初晓 日照西桥 云自摇想你当年荷风微摆的衣角木雕鎏金 岁月涟漪 七年前封笔因为我今生挥毫只为你雨打湿了眼眶 年年倚井盼归堂最怕不觉泪已拆两行我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱远方有琴 愀然空灵 声声催天雨涓涓心事说给自己听月影憧憧 烟火几重 烛花红红尘旧梦 梦断都成空雨打湿了眼眶 年年倚井盼归堂最怕不觉泪已拆两行我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱我在人间彷徨 寻不到你的天堂东瓶西镜放 恨不能遗忘又是清明雨上 折菊寄到你身旁把你最爱的歌来轻轻唱","name":"清明雨上","url":"http://139.9.130.249/group1/M00/00/00/wKgAbl6N2_-AdPXAADb-sifc6g4167.mp3"}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:20:27.504 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:20:27.620 DEBUG [http-nio-1000-exec-5]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:24:32.116 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.UserMapper.getById.debug:159 -==>  Preparing: select user_id, username, name, sex, header, nickname, user_email, created_time, update_time, version from bl_user where user_id = ? and deleted = 0 
2020-04-12 00:24:32.117 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.UserMapper.getById.debug:159 -==> Parameters: 3(Integer)
2020-04-12 00:24:32.190 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.UserMapper.getById.debug:159 -<==      Total: 1
2020-04-12 00:24:32.273 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.UserMapper.getById.debug:159 -==>  Preparing: select user_id, username, name, sex, header, nickname, user_email, created_time, update_time, version from bl_user where user_id = ? and deleted = 0 
2020-04-12 00:24:32.273 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.UserMapper.getById.debug:159 -==> Parameters: 3(Integer)
2020-04-12 00:24:32.626 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.UserMapper.getById.debug:159 -<==      Total: 1
2020-04-12 00:24:32.705 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:24:32.706 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247421732856291328(String)
2020-04-12 00:24:33.093 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:24:33.094 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247421732856291328(String)
2020-04-12 00:24:33.173 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:24:33.210 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:24:36.340 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.UserMapper.getById.debug:159 -==>  Preparing: select user_id, username, name, sex, header, nickname, user_email, created_time, update_time, version from bl_user where user_id = ? and deleted = 0 
2020-04-12 00:24:36.341 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.UserMapper.getById.debug:159 -==> Parameters: 3(Integer)
2020-04-12 00:24:36.693 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.UserMapper.getById.debug:159 -<==      Total: 1
2020-04-12 00:24:36.771 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:24:36.772 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247421732856291328(String)
2020-04-12 00:24:38.139 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:24:52.473 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:24:52.473 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/save(String), [Comment(id=null, commentContent=经历千辛万苦终于可以评论了,难得难得, commentUser=null, user=null, commentBlog=1247421732856291328, blog=null, commentGood=null, createdTime=null, commentFlag=false)](String), 0(Integer), org.springframework.data.mongodb.UncategorizedMongoDbException: Timeout while receiving message; nested exception is com.mongodb.MongoSocketReadTimeoutException: Timeout while receiving message
	at com.lza.blog.service.impl.CommentServiceImpl.save(CommentServiceImpl.java:64)
	at com.lza.blog.controller.CommentController.save(CommentController.java:42)
	at com.lza.blog.controller.CommentController$$FastClassBySpringCGLIB$$84026eed.invoke(<generated>)
	at com.lza.blog.aspect.RequestAspect.doAround(RequestAspect.java:72)
	at com.lza.blog.controller.CommentController$$EnhancerBySpringCGLIB$$7fa34076.save(<generated>)
Caused by: com.mongodb.MongoSocketReadTimeoutException: Timeout while receiving message
Caused by: java.net.SocketTimeoutException: Read timed out
(String), POST(String), 0(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>第一次用springboot构建项目，后台对象传给前台显示的时候，因为用的是thymeleaf模板，所以需要用它规定好的格式进行数据的动态显示，开始查看官方文档进行记录：</p>\n<p>thymeleaf模板语法,都以th属性开头,如:&nbsp; &nbsp; &lt;span th:text=\"...\"&gt;</p>\n<h2 id=\"一thymeleaf-简单表达式\">一,thymeleaf-简单表达式</h2>\n<p><strong>1.变量表达式</strong></p>\n<p>Thymeleaf模板引擎在进行模板渲染时，还会附带一个Context存放进行模板渲染的变量，在模板中定义的表达式本质上就是从Context中获取对应的变量的值&nbsp; &nbsp;如：&nbsp;&lt;p&gt;Today is: &lt;span th:text=\"${day}\"&gt;2 November 2016&lt;/span&gt;.&lt;/p&gt;</p>\n<p>假设day的值为2018年11月2日，那么渲染结果为：&lt;p&gt;Today is: 2018年11月2日.&lt;/p&gt;。<br />注意 : 渲染后,模板中span值2 November 2016将被覆盖，从中也可以看出，前台可以先放好静态的数据，当后台没有数据传过来的时候可以显示静态的数据进行显示，做好前后端分离。<br /><br /><strong>2.选择或星号表达式</strong></p>\n<p>可以简单理解为内层是对外层对象的引用&nbsp; 如：</p>\n<p>&lt;div th:object=\"${session.user}\"&gt;<br />&nbsp; &nbsp; &lt;p&gt;Name: &lt;span th:text=\"*{firstName}\"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Surname: &lt;span th:text=\"*{lastName}\"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Nationality: &lt;span th:text=\"*{nationality}\"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>\n<p>等同于以下方式:</p>\n<p>&lt;div&gt;<br />&nbsp; &lt;p&gt;Name: &lt;span th:text=\"${session.user.firstName}\"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Surname: &lt;span th:text=\"${session.user.lastName}\"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Nationality: &lt;span th:text=\"${session.user.nationality}\"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>\n<p>如果没有与th:object结合使用，*{}与${}效果一样，因为其范围自动扩展到context。<br /><br /></p>\n<p><br /><strong>3.文字国际化表达式</strong></p>\n<p>文字国际化表达式允许我们从一个外部文件获取区域文字信息(.properties)&nbsp;<br />使用Key-Value方式，还可以提供一组参数(可选).</p>\n<p><strong>#{main.title}<br />#{message.entrycreated(${entryId})}</strong></p>\n<p>模板引用:</p>\n<p><strong>&lt;table&gt;<br />&nbsp; &nbsp; &lt;th th:text=\"#{header.address.city}\"&gt;...&lt;/th&gt;<br />&nbsp; &nbsp; &lt;th th:text=\"#{header.address.country}\"&gt;...&lt;/th&gt;<br />&lt;/table&gt;<br />4.URL表达式</strong></p>\n<p>URL表达式指的是把一个有用的上下文或会话信息添加到URL，这个过程经常被叫做URL重写。&nbsp;<br />Thymeleaf对于URL的处理是通过语法@{&hellip;}来处理的</p>\n<p>&lt;!&mdash; 绝对路径 &mdash;&gt;<br />&lt;!-- Will produce 'http://localhost:8080/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{http://localhost:8080/gtvg/order/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>&lt;!&mdash; 相对路径 带参数&mdash;&gt;<br />&lt;!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{/order/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{/order/{orderId}/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>Thymeleaf支持相对路径和绝对路径<br />(orderId=${o.id})表示将括号内的内容作为URL参数处理<br />@{...}表达式中可以通过{orderId}访问Context中的orderId变量<br />@{/order}是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order<br /><br /></p>\n<h2 id=\"二thymeleaf-字面值\">二.thymeleaf-字面值</h2>\n<p>　&nbsp; &nbsp;1.文本文字：&rsquo;one text&rsquo;, &lsquo;Another one!&rsquo;,&hellip;&nbsp;<br />　　2.文字数量：0, 34, 3.0, 12.3,&hellip;&nbsp;<br />　　3.布尔型常量：true, false&nbsp;<br />　　4.空的文字：null&nbsp;<br />　　5.文字标记：one, sometext, main,&hellip;&nbsp;</p>\n<h2 id=\"三thymeleaf-文本处理\">三：thymeleaf-文本处理</h2>\n<p>1.字符串拼接：+</p>\n<p>&lt;span th:text=\"'Welcome to our application, ' + ${user.name} + '!'\"&gt;</p>\n<p>2.文字替换：|The name is ${name}|</p>\n<p>&lt;span th:text=\"|Welcome to our application, ${user.name}!|\"&gt;</p>\n<p>相比以上两种方式都可以实现字符串合并,但是,|&hellip;|中只能包含变量表达式${&hellip;}，不能包含其他常量、条件表达式等。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1247421732856291328","blogRead":3,"blogTitle":"SpringBoot-thymeleaf模板语法","blogType":7,"createdTime":"2020-02-17 07:11:31","typeName":"springboot","version":3},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:24:52.502 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:24:52.503 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/save(String), [Comment(id=null, commentContent=经历千辛万苦终于可以评论了,难得难得, commentUser=null, user=null, commentBlog=1247421732856291328, blog=null, commentGood=null, createdTime=null, commentFlag=false)](String), 0(Integer), org.springframework.data.mongodb.UncategorizedMongoDbException: Timeout while receiving message; nested exception is com.mongodb.MongoSocketReadTimeoutException: Timeout while receiving message
	at com.lza.blog.service.impl.CommentServiceImpl.save(CommentServiceImpl.java:64)
	at com.lza.blog.controller.CommentController.save(CommentController.java:42)
	at com.lza.blog.controller.CommentController$$FastClassBySpringCGLIB$$84026eed.invoke(<generated>)
	at com.lza.blog.aspect.RequestAspect.doAround(RequestAspect.java:72)
	at com.lza.blog.controller.CommentController$$EnhancerBySpringCGLIB$$7fa34076.save(<generated>)
Caused by: com.mongodb.MongoSocketReadTimeoutException: Timeout while receiving message
Caused by: java.net.SocketTimeoutException: Read timed out
(String), POST(String), 0(Long), {"code":20000,"msg":"评论成功!"}(String), 127.0.0.1(String)
2020-04-12 00:24:52.654 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:24:52.700 DEBUG [http-nio-1000-exec-10]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:24:53.724 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.UserMapper.getById.debug:159 -==>  Preparing: select user_id, username, name, sex, header, nickname, user_email, created_time, update_time, version from bl_user where user_id = ? and deleted = 0 
2020-04-12 00:24:53.725 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.UserMapper.getById.debug:159 -==> Parameters: 3(Integer)
2020-04-12 00:24:53.803 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.UserMapper.getById.debug:159 -<==      Total: 1
2020-04-12 00:24:53.881 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:24:53.882 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247421732856291328(String)
2020-04-12 00:24:54.177 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:24:54.493 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:24:54.494 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/save(String), [Comment(id=null, commentContent=经历千辛万苦终于可以评论了,难得难得ss, commentUser=null, user=null, commentBlog=1247421732856291328, blog=null, commentGood=null, createdTime=null, commentFlag=false)](String), 1(Integer), null, POST(String), 801(Long), {"code":20000,"msg":"评论成功!"}(String), 127.0.0.1(String)
2020-04-12 00:24:54.645 DEBUG [http-nio-1000-exec-3]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:24:54.874 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:24:54.875 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/getByBlog/1247421732856291328(String), [1247421732856291328](String), 1(Integer), null, GET(String), 115(Long), {"code":20000,"data":[{"blog":{"blogCollection":0,"blogComment":0,"blogContent":"<p>第一次用springboot构建项目，后台对象传给前台显示的时候，因为用的是thymeleaf模板，所以需要用它规定好的格式进行数据的动态显示，开始查看官方文档进行记录：</p>\n<p>thymeleaf模板语法,都以th属性开头,如:&nbsp; &nbsp; &lt;span th:text=\"...\"&gt;</p>\n<h2 id=\"一thymeleaf-简单表达式\">一,thymeleaf-简单表达式</h2>\n<p><strong>1.变量表达式</strong></p>\n<p>Thymeleaf模板引擎在进行模板渲染时，还会附带一个Context存放进行模板渲染的变量，在模板中定义的表达式本质上就是从Context中获取对应的变量的值&nbsp; &nbsp;如：&nbsp;&lt;p&gt;Today is: &lt;span th:text=\"${day}\"&gt;2 November 2016&lt;/span&gt;.&lt;/p&gt;</p>\n<p>假设day的值为2018年11月2日，那么渲染结果为：&lt;p&gt;Today is: 2018年11月2日.&lt;/p&gt;。<br />注意 : 渲染后,模板中span值2 November 2016将被覆盖，从中也可以看出，前台可以先放好静态的数据，当后台没有数据传过来的时候可以显示静态的数据进行显示，做好前后端分离。<br /><br /><strong>2.选择或星号表达式</strong></p>\n<p>可以简单理解为内层是对外层对象的引用&nbsp; 如：</p>\n<p>&lt;div th:object=\"${session.user}\"&gt;<br />&nbsp; &nbsp; &lt;p&gt;Name: &lt;span th:text=\"*{firstName}\"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Surname: &lt;span th:text=\"*{lastName}\"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Nationality: &lt;span th:text=\"*{nationality}\"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>\n<p>等同于以下方式:</p>\n<p>&lt;div&gt;<br />&nbsp; &lt;p&gt;Name: &lt;span th:text=\"${session.user.firstName}\"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Surname: &lt;span th:text=\"${session.user.lastName}\"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Nationality: &lt;span th:text=\"${session.user.nationality}\"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>\n<p>如果没有与th:object结合使用，*{}与${}效果一样，因为其范围自动扩展到context。<br /><br /></p>\n<p><br /><strong>3.文字国际化表达式</strong></p>\n<p>文字国际化表达式允许我们从一个外部文件获取区域文字信息(.properties)&nbsp;<br />使用Key-Value方式，还可以提供一组参数(可选).</p>\n<p><strong>#{main.title}<br />#{message.entrycreated(${entryId})}</strong></p>\n<p>模板引用:</p>\n<p><strong>&lt;table&gt;<br />&nbsp; &nbsp; &lt;th th:text=\"#{header.address.city}\"&gt;...&lt;/th&gt;<br />&nbsp; &nbsp; &lt;th th:text=\"#{header.address.country}\"&gt;...&lt;/th&gt;<br />&lt;/table&gt;<br />4.URL表达式</strong></p>\n<p>URL表达式指的是把一个有用的上下文或会话信息添加到URL，这个过程经常被叫做URL重写。&nbsp;<br />Thymeleaf对于URL的处理是通过语法@{&hellip;}来处理的</p>\n<p>&lt;!&mdash; 绝对路径 &mdash;&gt;<br />&lt;!-- Will produce 'http://localhost:8080/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{http://localhost:8080/gtvg/order/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>&lt;!&mdash; 相对路径 带参数&mdash;&gt;<br />&lt;!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{/order/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{/order/{orderId}/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>Thymeleaf支持相对路径和绝对路径<br />(orderId=${o.id})表示将括号内的内容作为URL参数处理<br />@{...}表达式中可以通过{orderId}访问Context中的orderId变量<br />@{/order}是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order<br /><br /></p>\n<h2 id=\"二thymeleaf-字面值\">二.thymeleaf-字面值</h2>\n<p>　&nbsp; &nbsp;1.文本文字：&rsquo;one text&rsquo;, &lsquo;Another one!&rsquo;,&hellip;&nbsp;<br />　　2.文字数量：0, 34, 3.0, 12.3,&hellip;&nbsp;<br />　　3.布尔型常量：true, false&nbsp;<br />　　4.空的文字：null&nbsp;<br />　　5.文字标记：one, sometext, main,&hellip;&nbsp;</p>\n<h2 id=\"三thymeleaf-文本处理\">三：thymeleaf-文本处理</h2>\n<p>1.字符串拼接：+</p>\n<p>&lt;span th:text=\"'Welcome to our application, ' + ${user.name} + '!'\"&gt;</p>\n<p>2.文字替换：|The name is ${name}|</p>\n<p>&lt;span th:text=\"|Welcome to our application, ${user.name}!|\"&gt;</p>\n<p>相比以上两种方式都可以实现字符串合并,但是,|&hellip;|中只能包含变量表达式${&hellip;}，不能包含其他常量、条件表达式等。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1247421732856291328","blogRead":4,"blogTitle":"SpringBoot-thymeleaf模板语法","blogType":7,"createdTime":"2020-02-17 07:11:31","version":5},"commentBlog":"1247421732856291328","commentContent":"经历千辛万苦终于可以评论了,难得难得ss","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:24:53","id":"1249010543067488256","user":{"createdTime":"2020-04-06 14:11:18","header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqWOAIDsBAAB28yzuliM075.jpg","name":"liuzian1","nickname":"昵称刘子安","sex":1,"updateTime":"2020-04-11 15:20:14","userEmail":"2282816304@qq.com","userId":3,"username":"liuzian","version":8}},{"blog":{"blogCollection":0,"blogComment":0,"blogContent":"<p>第一次用springboot构建项目，后台对象传给前台显示的时候，因为用的是thymeleaf模板，所以需要用它规定好的格式进行数据的动态显示，开始查看官方文档进行记录：</p>\n<p>thymeleaf模板语法,都以th属性开头,如:&nbsp; &nbsp; &lt;span th:text=\"...\"&gt;</p>\n<h2 id=\"一thymeleaf-简单表达式\">一,thymeleaf-简单表达式</h2>\n<p><strong>1.变量表达式</strong></p>\n<p>Thymeleaf模板引擎在进行模板渲染时，还会附带一个Context存放进行模板渲染的变量，在模板中定义的表达式本质上就是从Context中获取对应的变量的值&nbsp; &nbsp;如：&nbsp;&lt;p&gt;Today is: &lt;span th:text=\"${day}\"&gt;2 November 2016&lt;/span&gt;.&lt;/p&gt;</p>\n<p>假设day的值为2018年11月2日，那么渲染结果为：&lt;p&gt;Today is: 2018年11月2日.&lt;/p&gt;。<br />注意 : 渲染后,模板中span值2 November 2016将被覆盖，从中也可以看出，前台可以先放好静态的数据，当后台没有数据传过来的时候可以显示静态的数据进行显示，做好前后端分离。<br /><br /><strong>2.选择或星号表达式</strong></p>\n<p>可以简单理解为内层是对外层对象的引用&nbsp; 如：</p>\n<p>&lt;div th:object=\"${session.user}\"&gt;<br />&nbsp; &nbsp; &lt;p&gt;Name: &lt;span th:text=\"*{firstName}\"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Surname: &lt;span th:text=\"*{lastName}\"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &nbsp; &lt;p&gt;Nationality: &lt;span th:text=\"*{nationality}\"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>\n<p>等同于以下方式:</p>\n<p>&lt;div&gt;<br />&nbsp; &lt;p&gt;Name: &lt;span th:text=\"${session.user.firstName}\"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Surname: &lt;span th:text=\"${session.user.lastName}\"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br />&nbsp; &lt;p&gt;Nationality: &lt;span th:text=\"${session.user.nationality}\"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br />&lt;/div&gt;</p>\n<p>如果没有与th:object结合使用，*{}与${}效果一样，因为其范围自动扩展到context。<br /><br /></p>\n<p><br /><strong>3.文字国际化表达式</strong></p>\n<p>文字国际化表达式允许我们从一个外部文件获取区域文字信息(.properties)&nbsp;<br />使用Key-Value方式，还可以提供一组参数(可选).</p>\n<p><strong>#{main.title}<br />#{message.entrycreated(${entryId})}</strong></p>\n<p>模板引用:</p>\n<p><strong>&lt;table&gt;<br />&nbsp; &nbsp; &lt;th th:text=\"#{header.address.city}\"&gt;...&lt;/th&gt;<br />&nbsp; &nbsp; &lt;th th:text=\"#{header.address.country}\"&gt;...&lt;/th&gt;<br />&lt;/table&gt;<br />4.URL表达式</strong></p>\n<p>URL表达式指的是把一个有用的上下文或会话信息添加到URL，这个过程经常被叫做URL重写。&nbsp;<br />Thymeleaf对于URL的处理是通过语法@{&hellip;}来处理的</p>\n<p>&lt;!&mdash; 绝对路径 &mdash;&gt;<br />&lt;!-- Will produce 'http://localhost:8080/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{http://localhost:8080/gtvg/order/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>&lt;!&mdash; 相对路径 带参数&mdash;&gt;<br />&lt;!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{/order/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --&gt;<br />&lt;a href=\"details.html\" th:href=\"@{/order/{orderId}/details(orderId=${o.id})}\"&gt;view&lt;/a&gt;</p>\n<p>Thymeleaf支持相对路径和绝对路径<br />(orderId=${o.id})表示将括号内的内容作为URL参数处理<br />@{...}表达式中可以通过{orderId}访问Context中的orderId变量<br />@{/order}是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order<br /><br /></p>\n<h2 id=\"二thymeleaf-字面值\">二.thymeleaf-字面值</h2>\n<p>　&nbsp; &nbsp;1.文本文字：&rsquo;one text&rsquo;, &lsquo;Another one!&rsquo;,&hellip;&nbsp;<br />　　2.文字数量：0, 34, 3.0, 12.3,&hellip;&nbsp;<br />　　3.布尔型常量：true, false&nbsp;<br />　　4.空的文字：null&nbsp;<br />　　5.文字标记：one, sometext, main,&hellip;&nbsp;</p>\n<h2 id=\"三thymeleaf-文本处理\">三：thymeleaf-文本处理</h2>\n<p>1.字符串拼接：+</p>\n<p>&lt;span th:text=\"'Welcome to our application, ' + ${user.name} + '!'\"&gt;</p>\n<p>2.文字替换：|The name is ${name}|</p>\n<p>&lt;span th:text=\"|Welcome to our application, ${user.name}!|\"&gt;</p>\n<p>相比以上两种方式都可以实现字符串合并,但是,|&hellip;|中只能包含变量表达式${&hellip;}，不能包含其他常量、条件表达式等。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1247421732856291328","blogRead":3,"blogTitle":"SpringBoot-thymeleaf模板语法","blogType":7,"createdTime":"2020-02-17 07:11:31","version":4},"commentBlog":"1247421732856291328","commentContent":"ssadsaas","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"2020-04-12 00:20:05","id":"1249009332071260160","user":{"createdTime":"2020-04-06 14:11:18","header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqWOAIDsBAAB28yzuliM075.jpg","name":"liuzian1","nickname":"昵称刘子安","sex":1,"updateTime":"2020-04-11 15:20:14","userEmail":"2282816304@qq.com","userId":3,"username":"liuzian","version":8}}],"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:24:55.103 DEBUG [http-nio-1000-exec-9]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:24:57.402 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:24:57.403 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /comment/save(String), [Comment(id=null, commentContent=经历千辛万苦终于可以评论了,难得难得, commentUser=null, user=null, commentBlog=1247421732856291328, blog=null, commentGood=null, createdTime=null, commentFlag=false)](String), 0(Integer), org.springframework.data.mongodb.UncategorizedMongoDbException: Timeout while receiving message; nested exception is com.mongodb.MongoSocketReadTimeoutException: Timeout while receiving message
	at com.lza.blog.service.impl.CommentServiceImpl.save(CommentServiceImpl.java:64)
	at com.lza.blog.controller.CommentController.save(CommentController.java:42)
	at com.lza.blog.controller.CommentController$$FastClassBySpringCGLIB$$84026eed.invoke(<generated>)
	at com.lza.blog.aspect.RequestAspect.doAround(RequestAspect.java:72)
	at com.lza.blog.controller.CommentController$$EnhancerBySpringCGLIB$$7fa34076.save(<generated>)
Caused by: com.mongodb.MongoSocketReadTimeoutException: Timeout while receiving message
Caused by: java.net.SocketTimeoutException: Read timed out
(String), POST(String), 0(Long), {"code":20000,"data":0,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:24:57.558 DEBUG [http-nio-1000-exec-4]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:25:22.734 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.updateGoods.debug:159 -==>  Preparing: update bl_blog set blog_goods = blog_goods + 1 where blog_id = ? 
2020-04-12 00:25:22.734 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.updateGoods.debug:159 -==> Parameters: 1247421732856291328(String)
2020-04-12 00:25:23.174 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.BlogMapper.updateGoods.debug:159 -<==    Updates: 1
2020-04-12 00:25:23.876 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:25:23.878 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/good(String), [BlogGoods(id=null, userId=null, blogId=1247421732856291328)](String), 1(Integer), null, POST(String), 565(Long), {"code":20000,"msg":"点赞成功！"}(String), 127.0.0.1(String)
2020-04-12 00:25:24.031 DEBUG [http-nio-1000-exec-2]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:25:24.188 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:25:24.189 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getGood/1247421732856291328(String), [1247421732856291328](String), 1(Integer), null, GET(String), 51(Long), {"code":20000,"data":1,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:25:24.629 DEBUG [http-nio-1000-exec-1]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:25:26.093 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==>  Preparing: select blog_id, blog_image,blog_title, blog_content, blog_goods, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time,version from bl_blog where deleted = 0 and blog_id = ? 
2020-04-12 00:25:26.094 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -==> Parameters: 1247421732856291328(String)
2020-04-12 00:25:26.587 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.getBlogInfoById.debug:159 -<==      Total: 1
2020-04-12 00:25:26.950 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-04-12 00:25:26.951 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -==> Parameters: SpringBoot-thymeleaf模板语法(String), 1(Integer), 4(Integer), 1(Integer), 7(Integer), 0(Integer), 1247421732856291328(String), 5(Integer)
2020-04-12 00:25:27.106 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.BlogMapper.updateBlogInfoByid.debug:159 -<==    Updates: 1
2020-04-12 00:25:27.527 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:25:27.528 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/collection(String), [BlogCollection(collectionId=null, blogId=1247421732856291328, blog=null, userId=null, user=null, collectionTime=null)](String), 1(Integer), null, POST(String), 1145(Long), {"code":20000,"msg":"收藏成功！"}(String), 127.0.0.1(String)
2020-04-12 00:25:27.682 DEBUG [http-nio-1000-exec-6]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:25:28.054 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:25:28.055 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getCollection/1247421732856291328(String), [1247421732856291328](String), 1(Integer), null, GET(String), 278(Long), {"code":20000,"data":1,"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:25:31.080 DEBUG [http-nio-1000-exec-7]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
2020-04-12 00:25:33.164 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==>  Preparing: insert into bl_log(log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip) values (?,?,?,?,?,?,?,?) 
2020-04-12 00:25:33.165 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -==> Parameters: /blog/getCollectionList(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), org.springframework.data.mongodb.UncategorizedMongoDbException: Timeout while receiving message; nested exception is com.mongodb.MongoSocketReadTimeoutException: Timeout while receiving message
	at com.lza.blog.service.impl.CommentServiceImpl.save(CommentServiceImpl.java:64)
	at com.lza.blog.controller.CommentController.save(CommentController.java:42)
	at com.lza.blog.controller.CommentController$$FastClassBySpringCGLIB$$84026eed.invoke(<generated>)
	at com.lza.blog.aspect.RequestAspect.doAround(RequestAspect.java:72)
	at com.lza.blog.controller.CommentController$$EnhancerBySpringCGLIB$$7fa34076.save(<generated>)
Caused by: com.mongodb.MongoSocketReadTimeoutException: Timeout while receiving message
Caused by: java.net.SocketTimeoutException: Read timed out
(String), POST(String), 64(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247423893702991872","blogRead":26,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","version":27},"blogId":"1247423893702991872","collectionId":"1248990313935040512","user":{"createdTime":"2020-04-06 14:11:18","header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqWOAIDsBAAB28yzuliM075.jpg","name":"liuzian1","nickname":"昵称刘子安","password":"","sex":1,"updateTime":"2020-04-08 02:39:02","userEmail":"2282816304@qq.com","userId":3,"username":"liuzian111"},"userId":3},{"blog":{"blogCollection":2,"blogComment":0,"blogGoods":2,"blogId":"1247423893702991872","blogRead":29,"blogTitle":"到底要不要重复造轮子?","blogType":6,"createdTime":"2020-04-07 07:20:06","version":31},"blogId":"1247423893702991872","collectionId":"1248993113691680768","user":{"createdTime":"2020-04-06 14:11:18","header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqWOAIDsBAAB28yzuliM075.jpg","name":"liuzian1","nickname":"昵称刘子安","password":"","sex":1,"updateTime":"2020-04-08 02:39:02","userEmail":"2282816304@qq.com","userId":3,"username":"liuzian111"},"userId":3},{"blog":{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247365394201612288","blogImage":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MeK-AJ7A8AAB28yzuliM104.jpg","blogRead":12,"blogTitle":"java下载字符串","blogType":6,"createdTime":"2020-03-27 03:27:38","version":18},"blogId":"1247365394201612288","collectionId":"1248994053924614144","user":{"createdTime":"2020-04-06 14:11:18","header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqWOAIDsBAAB28yzuliM075.jpg","name":"liuzian1","nickname":"昵称刘子安","password":"","sex":1,"updateTime":"2020-04-08 02:39:02","userEmail":"2282816304@qq.com","userId":3,"username":"liuzian111"},"userId":3},{"blog":{"blogCollection":1,"blogComment":0,"blogGoods":1,"blogId":"1247421732856291328","blogRead":4,"blogTitle":"SpringBoot-thymeleaf模板语法","blogType":7,"createdTime":"2020-02-17 07:11:31","version":5},"blogId":"1247421732856291328","collectionId":"1249010683530534912","user":{"createdTime":"2020-04-06 14:11:18","header":"http://139.9.130.249/group1/M00/00/00/wKgAbl6MqWOAIDsBAAB28yzuliM075.jpg","name":"liuzian1","nickname":"昵称刘子安","password":"","sex":1,"updateTime":"2020-04-11 15:20:14","userEmail":"2282816304@qq.com","userId":3,"username":"liuzian"},"userId":3}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":4,"totalPage":1},"msg":"操作成功!"}(String), 127.0.0.1(String)
2020-04-12 00:25:33.436 DEBUG [http-nio-1000-exec-8]com.lza.blog.mapper.LogMapper.logSave.debug:159 -<==    Updates: 1
